[["index.html", "Selecting SNPs for SALT array 1 Preface", " Selecting SNPs for SALT array Joseph Matt 2023-12-12 1 Preface This is a series of markdown files demonstrating how SNPs were selected for the SALT consortium oyster 5K SNP array. It is formatted as a series of chapters. Each chapter builds on the previous with the ultimate product of ~5K candidate SNPs to send to Paragon Genomics for producing a 5K SNP array for the SALT consortium. "],["input-data.html", "2 Input Data 2.1 Objective: Organize individual and SNP data 2.2 Individual Sample Information 2.3 SNP Information 2.4 Save files", " 2 Input Data 2.1 Objective: Organize individual and SNP data Organize and consolidate data from hundreds of C.virginica collected around the Gulf of Mexico genotyped on a high density SNP panel (~600K) developed by the East Coast consortium. 2.2 Individual Sample Information General Gulf (GG) samples (n=404) and South Texas (STX) samples (n=76) were genotyped on 600K ThermoFisher array and analyzed separately. A unique genotyping probeset list was used for each sample set. 447 samples passed QA. 2.2.1 Basic sample information “sample_info_SALT” data file provided by Eric Salliant of University of Southern Mississippi, includes data provided by ThermoFisher and metadata (e.g., geographic details of where oysters were collected). suppressMessages(sample_info_SALT &lt;- read_csv(here::here(&quot;data&quot;,&quot;raw&quot;,&quot;cvir_gulf_600K_ES.csv&quot;))) sample_info_SALT$...1 &lt;- NULL sample_info_SALT ## # A tibble: 480 × 16 ## Sample Filename SubmittedPlate sample_id Geographic_code Collection_data ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 a551319-44… 9SR48340 F12 BWBFL_1 BWBFL 25.92860, -81.… ## 2 a551319-44… 9SR48340 G08 BWBFL_10 BWBFL 25.92860, -81.… ## 3 a551319-44… 9SR48340 G09 BWBFL_11 BWBFL 25.92860, -81.… ## 4 a551319-44… 9SR48340 G10 BWBFL_12 BWBFL 25.92860, -81.… ## 5 a551319-44… 9SR48340 G11 BWBFL_14 BWBFL 25.92860, -81.… ## 6 a551319-44… 9SR48340 G12 BWBFL_15 BWBFL 25.92860, -81.… ## 7 a551319-44… 9SR48340 H01 BWBFL_16 BWBFL 25.92860, -81.… ## 8 a551319-44… 9SR48340 H02 BWBFL_17 BWBFL 25.92860, -81.… ## 9 a551319-44… 9SR48340 H03 BWBFL_18 BWBFL 25.92860, -81.… ## 10 a551319-44… 9SR48340 H04 BWBFL_19 BWBFL 25.92860, -81.… ## # ℹ 470 more rows ## # ℹ 10 more variables: SampleName &lt;chr&gt;, SampleSource &lt;chr&gt;, SampleType &lt;chr&gt;, ## # Species &lt;chr&gt;, Concentration &lt;dbl&gt;, PlateName &lt;chr&gt;, Rename &lt;chr&gt;, ## # Reproducibility &lt;dbl&gt;, Gender &lt;chr&gt;, SampleOrigin &lt;chr&gt; “sample_info_RAD” data file provided by Amanda Barker of the Marine Genomics Lab, it is data of a TPWD and Marine Genomics Lab project using RAD suppressMessages(sample_info_RAD &lt;-read_csv(here::here(&quot;data&quot;,&quot;raw&quot;,&quot;oyster_genotyped_sample_info.csv&quot;))) sample_info_RAD$...1 &lt;- NULL sample_info_RAD ## # A tibble: 463 × 14 ## lib_id sample_id barcode index site lib region gulf_location state bay ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 apa_01 59751 TCAGT index_… apal… 1 north… Eastern FL Apal… ## 2 apa_02 59752 AGCTA index_… apal… 1 north… Eastern FL Apal… ## 3 apa_03 59753 CGGTA index_… apal… 1 north… Eastern FL Apal… ## 4 apa_04 59754 GGATA index_… apal… 1 north… Eastern FL Apal… ## 5 apa_05 59755 TCCGG index_… apal… 1 north… Eastern FL Apal… ## 6 apa_06 59756 ACACA index_… apal… 1 north… Eastern FL Apal… ## 7 apa_07 59757 GCATG index_… apal… 1 north… Eastern FL Apal… ## 8 apa_08 59758 ACTGG index_… apal… 1 north… Eastern FL Apal… ## 9 apa_09 59759 CTGCG index_… apal… 1 north… Eastern FL Apal… ## 10 apa_10 59760 GTCCG index_… apal… 1 north… Eastern FL Apal… ## # ℹ 453 more rows ## # ℹ 4 more variables: latitude &lt;dbl&gt;, longitude &lt;dbl&gt;, tidal.zone &lt;chr&gt;, ## # harvest &lt;chr&gt; Some sample info from the RAD dataset was in a seperate file missingdata &lt;-read_csv(here::here(&quot;data&quot;,&quot;raw&quot;,&quot;missing_cvir.csv&quot;)) missingdata ## # A tibble: 5 × 8 ## sample_id gulf_location state bay latitude longitude `tidal zone` harvest ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 60111 Southwestern TX-Lower Uppe… 27.6 -97.2 Intertidal No ## 2 60113 Southwestern TX-Lower Uppe… 27.6 -97.2 Intertidal No ## 3 60008 Southwestern TX-Lower Port… 26.6 -97.4 Intertidal No ## 4 60012 Southwestern TX-Lower Port… 26.6 -97.4 Intertidal No ## 5 60013 Southwestern TX-Lower Port… 26.6 -97.4 Intertidal No # add missing data with RAD data library(plyr) sample_info_RADx &lt;- rbind.fill(sample_info_RAD,missingdata) detach(&quot;package:plyr&quot;, unload=TRUE) 2.2.2 Quality control info from Thermo Fisher #read in QC data for both data sets #not sure how to use read_table to imitate read.table, so &quot;here&quot; tabled for now #other_qc &lt;- read_table(here::here(&quot;data&quot;,&quot;raw&quot;,&quot;other_genotypingQC.report.txt&quot;), col_names = TRUE) other_qc &lt;- read.table(&quot;data/raw/other_genotypingQC.report.txt&quot;,fill=TRUE, header = TRUE) south_qc &lt;- read.table(&quot;data/raw/south_genotypingQC.report.txt&quot;, fill = TRUE, header=TRUE) #add column of data_set - &quot;other&quot; or &quot;south_texas&quot; other_qc$data_set &lt;- &quot;other&quot; south_qc$data_set &lt;- &quot;south_texas&quot; #rbind &quot;other&quot; and &quot;south_texas&quot; data frames qc_indv &lt;- rbind(other_qc,south_qc) #rename in QC &quot;celfiles&quot; to &quot;Sample&quot; qc_indv &lt;- qc_indv %&gt;% rename(Sample = cel_files) as_tibble(qc_indv) ## # A tibble: 473 × 19 ## Sample computed_gender call_rate total_call_rate het_rate total_het_rate ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 a551319-44… 99.0 99.0 21.6 21.6 77.4 ## 2 a551319-44… 99.3 99.3 22.0 22.0 77.2 ## 3 a551319-44… 99.2 99.2 21.8 21.8 77.4 ## 4 a551319-44… 99.4 99.4 22.0 22.0 77.4 ## 5 a551319-44… 99.4 99.4 22.6 22.6 76.8 ## 6 a551319-44… 99.4 99.4 22.8 22.8 76.6 ## 7 a551319-44… 99.1 99.1 20.9 20.9 78.2 ## 8 a551319-44… 99.4 99.4 22.7 22.7 76.7 ## 9 a551319-44… 99.1 99.1 20.3 20.3 78.8 ## 10 a551319-44… 99.2 99.2 20.8 20.8 78.5 ## # ℹ 463 more rows ## # ℹ 13 more variables: hom_rate &lt;dbl&gt;, total_hom_rate &lt;dbl&gt;, ## # cluster_distance_mean &lt;dbl&gt;, cluster_distance_stdev &lt;dbl&gt;, ## # allele_summarization_mean &lt;dbl&gt;, allele_summarization_stdev &lt;dbl&gt;, ## # allele_deviation_mean &lt;dbl&gt;, allele_deviation_stdev &lt;dbl&gt;, ## # allele_mad_residuals_mean &lt;dbl&gt;, allele_mad_residuals_stdev &lt;dbl&gt;, ## # affymetrix.plate.barcode &lt;chr&gt;, affymetrix.plate.peg.wellposition &lt;lgl&gt;, … 2.2.3 List of oysters that passed the genotyping according to ThermoFisher gg_qc_filt &lt;- read.table(&quot;data/raw/other_sample_QCFilteredCR.txt&quot;,fill = TRUE, header = TRUE) passed_GG &lt;- gg_qc_filt$cel_files st_qc_filt &lt;- read.table(&quot;data/raw/south_sample_QCFilteredCR.txt&quot;,fill = TRUE, header = TRUE) passed_ST &lt;- st_qc_filt$cel_files 2.2.4 Merge Files Consolidate all identifying information on samples to “sample_info_full” #merge sample_info_SALT and sample_info_RAD sample_info &lt;- merge(x = sample_info_SALT, y = sample_info_RADx, all.x = TRUE) #add quality control data, filter out only individuals that passed Thermo&#39;s quality control sample_info_full &lt;- sample_info %&gt;% merge(qc_indv, all.x = TRUE) %&gt;% filter (Sample %in% passed_GG | Sample %in% passed_ST) #some individuals have multiple rows in the data set, with the only varying information the lib_id, barcode, and index columns, likely RAD information. Below, choose only one row for these individuals: a551319-4448066-110623-383_A04.CEL and a551319-4448066-110623-383_A08.CEL sample_info_full &lt;- sample_info_full %&gt;% distinct(Sample, .keep_all = TRUE) #add a &quot;locaton&quot; column for the RAD data sample_info_full$location &lt;- paste(sample_info_full$bay,sample_info_full$state,sep=&quot;,&quot;) #remove all periods and hyphens from sample name (causes issues downstream) sample_info_full$Sample &lt;- gsub(&quot;\\\\.&quot;,&quot;&quot;, sample_info_full$Sample) sample_info_full$Sample &lt;- gsub(&quot;_&quot;,&quot;&quot;, sample_info_full$Sample) sample_info_full$Sample &lt;- gsub(&quot;-&quot;,&quot;&quot;, sample_info_full$Sample) as_tibble(sample_info_full) ## # A tibble: 447 × 49 ## Sample sample_id Filename SubmittedPlate Geographic_code Collection_data ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 a551319444… Auburn_1 9SR48342 A01 Auburn selecte… Auburn selecte… ## 2 a551319444… Auburn_2 9SR48342 A02 Auburn selecte… Auburn selecte… ## 3 a551319444… Auburn_3 9SR48342 A03 Auburn selecte… Auburn selecte… ## 4 a551319444… Auburn_4 9SR48342 A04 Auburn selecte… Auburn selecte… ## 5 a551319444… Auburn_6 9SR48342 A05 Auburn selecte… Auburn selecte… ## 6 a551319444… Auburn_7 9SR48342 A06 Auburn selecte… Auburn selecte… ## 7 a551319444… Auburn_8 9SR48342 A07 Auburn selecte… Auburn selecte… ## 8 a551319444… Auburn_9 9SR48342 A08 Auburn selecte… Auburn selecte… ## 9 a551319444… Auburn_10 9SR48342 A09 Auburn selecte… Auburn selecte… ## 10 a551319444… Auburn_11 9SR48342 A10 Auburn selecte… Auburn selecte… ## # ℹ 437 more rows ## # ℹ 43 more variables: SampleName &lt;chr&gt;, SampleSource &lt;chr&gt;, SampleType &lt;chr&gt;, ## # Species &lt;chr&gt;, Concentration &lt;dbl&gt;, PlateName &lt;chr&gt;, Rename &lt;chr&gt;, ## # Reproducibility &lt;dbl&gt;, Gender &lt;chr&gt;, SampleOrigin &lt;chr&gt;, lib_id &lt;chr&gt;, ## # barcode &lt;chr&gt;, index &lt;chr&gt;, site &lt;chr&gt;, lib &lt;dbl&gt;, region &lt;chr&gt;, ## # gulf_location &lt;chr&gt;, state &lt;chr&gt;, bay &lt;chr&gt;, latitude &lt;dbl&gt;, ## # longitude &lt;dbl&gt;, tidal.zone &lt;chr&gt;, harvest &lt;chr&gt;, `tidal zone` &lt;chr&gt;, … 2.2.5 Tidy Up Lat/Long Data and Site Codes Fix inconsistencies in geographic data and site codes #lat and long data differs in format for samples from SALT and RAD data files # 1 - tidy up lat and long from SALT data files sample_info_full$lat&lt;-substr(sample_info_full$Collection_data,1,8) sample_info_full$long&lt;-str_sub(sample_info_full$Collection_data,-10) sample_info_full$long &lt;- gsub(&quot;_&quot;,&quot;&quot;, sample_info_full$long) sample_info_full$long &lt;- gsub(&quot; &quot;,&quot;&quot;, sample_info_full$long) # 2 - add the SALT lat and long data to the latitude and longitude sample_info_full$latitude &lt;- ifelse(is.na(sample_info_full$latitude), as.numeric(sample_info_full$lat),sample_info_full$latitude) sample_info_full$longitude &lt;- ifelse(is.na(sample_info_full$longitude), as.numeric(sample_info_full$long),sample_info_full$longitude) # 3 - as numeric lat and long data sample_info_full$latitude &lt;- as.numeric(sample_info_full$latitude) sample_info_full$longitude &lt;- as.numeric(sample_info_full$longitude) # - 4 add &quot;geographic_code&quot; information to those without it sample_info_full$Geographic_code&lt;-as.character(sample_info_full$Geographic_code) #ULTX 1/2 sample_info_full$Geographic_code &lt;- ifelse(sample_info_full$bay %in% &quot;Upper Laguna Madre&quot;,&quot;ULTX&quot;, sample_info_full$Geographic_code) #ULTX 2/2 sample_info_full$Geographic_code &lt;- ifelse(sample_info_full$sample_id %like% &quot;ULM&quot;,&quot;ULTX&quot;,sample_info_full$Geographic_code) #like requires data.table package #PMTX Port Mansfield Texas sample_info_full$Geographic_code &lt;- ifelse(sample_info_full$bay %in% &quot;Port Mansfield&quot;,&quot;PMTX&quot;, sample_info_full$Geographic_code) #Corpus Christi Bay Texas sample_info_full$Geographic_code &lt;- ifelse(sample_info_full$site %in% &quot;corpus_christi&quot;,&quot;CCTX&quot;, sample_info_full$Geographic_code) #Tampa Bay FL sample_info_full$Geographic_code &lt;- ifelse(sample_info_full$lib_id %in% c(&quot;tam_01&quot;,&quot;tam_04&quot;,&quot;tam_05&quot;,&quot;tam_06&quot;),&quot;TBFL&quot;, sample_info_full$Geographic_code) #Boca Ciega Bay Aquatic Preserve FL sample_info_full$Geographic_code &lt;- ifelse(sample_info_full$lib_id %in% c(&quot;tam_20&quot;,&quot;tam_22&quot;,&quot;tam_23&quot;),&quot;BCFL&quot;, sample_info_full$Geographic_code) #Madelaine Key, FL sample_info_full$Geographic_code &lt;- ifelse(sample_info_full$lib_id %in% c(&quot;tam_17&quot;,&quot;tam_18&quot;),&quot;MKFL&quot;, sample_info_full$Geographic_code) #Caloosahatchee River, FL sample_info_full$Geographic_code &lt;- ifelse(sample_info_full$lib_id %in% c(&quot;car_01&quot;,&quot;car_03&quot;,&quot;car_05&quot;,&quot;car_07&quot;),&quot;CAFL&quot;, sample_info_full$Geographic_code) # - 5 add lat and long to ULM obs that do not have this info sample_info_full$latitude &lt;- ifelse(sample_info_full$Geographic_code %in% &quot;ULTX&quot;,27.63083,sample_info_full$latitude) sample_info_full$longitude &lt;- ifelse(sample_info_full$Geographic_code %in% &quot;ULTX&quot;,-97.24018,sample_info_full$longitude) 2.2.6 Organize oysters into “metagroup” categories: South Texas (STX) northern Gulf of Mexico (nGOM) Florida (FL) Selected Line - Auburn nGOM Selected Line - Auburn FL Selected Line - OBOY sample_info_full$metagroup &lt;- &quot;selected lines&quot; sample_info_full$metagroup &lt;- ifelse(sample_info_full$Geographic_code %in% c(&quot;AHFL&quot;,&quot;BWBFL&quot;, &quot;OBFL&quot;,&quot;LRFL&quot;, &quot;CRFL&quot;, &quot;PBFL&quot;,&quot;SKFL&quot;, &quot;CAFL&quot;,&quot;TBFL&quot;, &quot;MKFL&quot;, &quot;BCFL&quot;),&quot;FL&quot;,sample_info_full$metagroup) sample_info_full$metagroup &lt;- ifelse(sample_info_full$Geographic_code %in% c(&quot;ALAL&quot;,&quot;CPAL&quot;, &quot;EGTX&quot;,&quot;EMTX&quot;, &quot;LCLA&quot;,&quot;LSTX&quot;, &quot;PSMS&quot;,&quot;SATX&quot;, &quot;SLLA&quot;,&quot;WGTX&quot;, &quot;WMTX&quot;),&quot;nGOM&quot;,sample_info_full$metagroup) sample_info_full$metagroup &lt;- ifelse(sample_info_full$Geographic_code %in% c(&quot;ULTX&quot;,&quot;PMTX&quot;, &quot;CCTX&quot;),&quot;STX&quot;,sample_info_full$metagroup) sample_info_full$metagroup &lt;- ifelse(sample_info_full$Collection_data %in% &quot;Auburn selected line 1&quot;, &quot;Selected Line - Auburn nGOM&quot;,sample_info_full$metagroup) sample_info_full$metagroup &lt;- ifelse(sample_info_full$Collection_data %in% &quot;Auburn selected line 2&quot;, &quot;Selected Line - Auburn FL&quot;,sample_info_full$metagroup) sample_info_full$metagroup &lt;- ifelse(sample_info_full$Collection_data %in% &quot;O&#39;Boy selected line&quot;, &quot;Selected Line - OBOY&quot;,sample_info_full$metagroup) #order the factor levels for geographic code based on longitude (move west to east) library(dplyr) sample_info_full&lt;-arrange(sample_info_full,longitude) sample_info_full$Geographic_code&lt;-factor(sample_info_full$Geographic_code, levels=c(&quot;PMTX&quot;,&quot;ULTX&quot;,&quot;CCTX&quot;,&quot;SATX&quot;,&quot;WMTX&quot;,&quot;EMTX&quot;,&quot;WGTX&quot;,&quot;EGTX&quot;,&quot;LSTX&quot;,&quot;LCLA&quot;,&quot;SLLA&quot;,&quot;PSMS&quot;,&quot;CPAL&quot;,&quot;ALAL&quot;,&quot;PBFL&quot;,&quot;AHFL&quot;,&quot;OBFL&quot;,&quot;LRFL&quot;,&quot;SKFL&quot;,&quot;CRFL&quot;,&quot;MKFL&quot;,&quot;BCFL&quot;,&quot;TBFL&quot;,&quot;CAFL&quot;,&quot;BWBFL&quot;)) 2.2.7 Map sites where samples were collected Site codes and site names: PMTX ~ Port Mansfield ULTX ~ Upper Laguna Madre CCTX ~ Corpus Christi Bay SATX ~ San Antonio Bay WMTX ~ West Matagorda Bay EMTX ~ East Matagorda Bay WGTX ~ West Galveston Bay EGTX ~ East Galveston Bay LSTX ~ Sabine Pass LCLA ~ Calcasieu Lake SLLA ~ Caillou Lake PSMS ~ Pascagoula River CPAL ~ Cedar Point ALAL ~ Alligator Lake PBFL ~ Pensacola Bay AHFL ~ Alligator Harbor OBFL ~ Oyster Bay LRFL ~ Suwannee River SKFL ~ Seahorse Key CRFL ~ Corrigan Reef MKFL ~ Madelaine Key BCFL ~ Boca Ciega Bay Aquatic Preserve TBFL ~ Tampa Bay CAFL ~ Caloosahatchee River BWBFL ~ Backwater Bay MainStates &lt;- map_data(&quot;state&quot;) ggplot()+ geom_polygon(data=MainStates,aes(x=long,y=lat,group=group),fill=&quot;lightgray&quot;, color=&quot;black&quot;) + theme_bw()+ theme(panel.grid.major = element_blank())+ theme(panel.grid.minor = element_blank())+ coord_cartesian(xlim=c(-99.830000,-79.783711), ylim = c(24.783218,30.858945)) + geom_point(data = sample_info_full %&gt;% filter(!Collection_data == &quot;Auburn selected line 2&quot;) %&gt;% filter(!Collection_data == &quot;O&#39;Boy selected line&quot;) %&gt;% filter(!Collection_data == &quot;Auburn selected line 1&quot;), #remove the selected lines from mapping aes(y = latitude, x = longitude, group=Geographic_code,colour=Geographic_code,shape = metagroup), size=5,stroke=0.5) Map representing the relative number of samples collected in each location ggplot()+ geom_polygon(data=MainStates,aes(x=long,y=lat,group=group),fill=&quot;lightgray&quot;, color=&quot;black&quot;) + theme_bw()+ theme(panel.grid.major = element_blank())+ theme(panel.grid.minor = element_blank())+ coord_cartesian(xlim=c(-99.830000,-79.783711), ylim = c(24.783218,30.858945)) + geom_point(data = sample_info_full %&gt;% mutate(latitude2 = round(latitude,3)) %&gt;% mutate(longitude2 = round(longitude,3)) %&gt;% count(Geographic_code,metagroup,longitude2,latitude2) %&gt;% mutate_at(c(&#39;longitude2&#39;, &#39;latitude2&#39;), as.numeric) %&gt;% filter(!metagroup == &quot;Selected Line - Auburn FL&quot;) %&gt;% filter(!metagroup == &quot;Selected Line - Auburn nGOM&quot;) %&gt;% filter(!metagroup == &quot;Selected Line - OBOY&quot;), #counts for proportional representation aes(y = latitude2, x = longitude2, group=Geographic_code,colour=Geographic_code,shape = metagroup,size = n), stroke=0.5) #produce blank map to add points to later blank_map &lt;- ggplot()+ geom_polygon(data=MainStates,aes(x=long,y=lat,group=group),fill=&quot;grey90&quot;, color=&quot;black&quot;) + theme_bw()+ theme(panel.grid.major = element_blank())+ theme(panel.grid.minor = element_blank())+ coord_cartesian(xlim=c(-99.830000,-79.783711), ylim = c(24.783218,30.858945)) #add site codes to individual data sample_info_full &lt;- sample_info_full %&gt;% mutate(Geographic_location = case_when( Geographic_code %in% &quot;PMTX&quot; ~ &quot;Port Mansfield&quot;, Geographic_code %in% &quot;ULTX&quot; ~ &quot;Upper Laguna Madre&quot;, Geographic_code %in% &quot;CCTX&quot; ~ &quot;Corpus Christi Bay&quot;, Geographic_code %in% &quot;SATX&quot; ~ &quot;San Antonio Bay&quot;, Geographic_code %in% &quot;WMTX&quot; ~ &quot;West Matagorda Bay&quot;, Geographic_code %in% &quot;EMTX&quot; ~ &quot;East Matagorda Bay&quot;, Geographic_code %in% &quot;WGTX&quot; ~ &quot;West Galveston Bay&quot;, Geographic_code %in% &quot;EGTX&quot; ~ &quot;East Galveston Bay&quot;, Geographic_code %in% &quot;LSTX&quot; ~ &quot;Sabine Pass&quot;, Geographic_code %in% &quot;LCLA&quot; ~ &quot;Calcasieu Lake&quot;, Geographic_code %in% &quot;SLLA&quot; ~ &quot;Caillou Lake&quot;, Geographic_code %in% &quot;PSMS&quot; ~ &quot;Pascagoula River&quot;, Geographic_code %in% &quot;CPAL&quot; ~ &quot;Cedar Point&quot;, Geographic_code %in% &quot;ALAL&quot; ~ &quot;Alligator Lake&quot;, Geographic_code %in% &quot;PBFL&quot; ~ &quot;Pensacola Bay&quot;, Geographic_code %in% &quot;AHFL&quot; ~ &quot;Alligator Harbor&quot;, Geographic_code %in% &quot;OBFL&quot; ~ &quot;Oyster Bay&quot;, Geographic_code %in% &quot;LRFL&quot; ~ &quot;Suwannee River&quot;, Geographic_code %in% &quot;SKFL&quot; ~ &quot;Seahorse Key&quot;, Geographic_code %in% &quot;CRFL&quot; ~ &quot;Corrigan Reef&quot;, Geographic_code %in% &quot;MKFL&quot; ~ &quot;Madelaine Key&quot;, Geographic_code %in% &quot;BCFL&quot; ~ &quot;Boca Ciega Bay Aquatic Preserve&quot;, Geographic_code %in% &quot;TBFL&quot; ~ &quot;Tampa Bay&quot;, Geographic_code %in% &quot;CAFL&quot; ~ &quot;Caloosahatchee River&quot;, Geographic_code %in% &quot;BWBFL&quot; ~ &quot;Backwater Bay&quot;)) %&gt;% mutate(Geographic_state = case_when( str_sub(Geographic_code,-2) %in% &quot;TX&quot; ~ &quot;Texas&quot;, str_sub(Geographic_code,-2) %in% &quot;LA&quot; ~ &quot;Louisiana&quot;, str_sub(Geographic_code,-2) %in% &quot;MS&quot; ~ &quot;Mississippi&quot;, str_sub(Geographic_code,-2) %in% &quot;AL&quot; ~ &quot;Alabama&quot;, str_sub(Geographic_code,-2) %in% &quot;FL&quot; ~ &quot;Florida&quot;)) Table of genotyped samples categorized by location of collection sample_info_full %&gt;% count(Geographic_code,Geographic_location,Geographic_state,metagroup) %&gt;% head() ## Geographic_code Geographic_location Geographic_state metagroup n ## 1 PMTX Port Mansfield Texas STX 19 ## 2 ULTX Upper Laguna Madre Texas STX 42 ## 3 CCTX Corpus Christi Bay Texas STX 14 ## 4 SATX San Antonio Bay Texas nGOM 11 ## 5 WMTX West Matagorda Bay Texas nGOM 16 ## 6 EMTX East Matagorda Bay Texas nGOM 18 Table of genotyped samples categorized by the region of collection - south Texas (STX), northern Gulf of Mexico (nGOM), Florida (FL), and individuals from selected lines (selected lines) sample_info_full %&gt;% count(metagroup) ## metagroup n ## 1 FL 101 ## 2 STX 75 ## 3 Selected Line - Auburn FL 22 ## 4 Selected Line - Auburn nGOM 23 ## 5 Selected Line - OBOY 22 ## 6 nGOM 204 2.3 SNP Information Total: 566,262 SNPs considered ‘recommended’ for downstream analysis by ThermoFisher if fit in one of the following categories: PolyHighResolution: SNPs with well-separated genotype clusters and two or more alleles in the genotype calls NoMinorHom: SNPs with well-separated genotype clusters; one cluster is homozygous and one is heterozygous for biallelic SNPs, only one homozygous cluster and one or more heterozygous clusters appear for multiallelic SNPs MonoHighResolution: SNPs with one well-formed genotype cluster; must be homozygous Recommended “other” cluster (GG): 207,534 Recommended “south” cluster (ST): 152,260 Recommended in both clusters: 105,363 Only SNPs recommended for both GG and ST analyzed here (the 105,363) 2.3.1 General Information on SNPs #read in general info snp_info &lt;- read.table(&quot;data/raw/snp_info_cv_ECarray_header_edited.txt&quot;, fill = TRUE , header = TRUE ) #rename general info column &quot;ID&quot; to &quot;probeset_id&quot; to match with genotyped files snp_info &lt;- snp_info %&gt;% rename(probeset_id = ID_Name) as_tibble(snp_info) ## # A tibble: 582,726 × 31 ## ReporterKey Affx probeset_id Sequence SNPType ProbeCount Tile Replicates ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 531501570 Affx-12… AX-5782382… CCTGCCC… Y 2 1 2 ## 2 531501571 Affx-12… AX-5782382… ATGATTG… K 2 1 2 ## 3 531501572 Affx-12… AX-5782382… AGAGGGA… R 2 1 2 ## 4 531422636 Affx-12… AX-5781595… CCTGATA… Y 2 1 2 ## 5 531421883 Affx-12… AX-5781587… GGCGGAT… K 2 1 2 ## 6 531422066 Affx-12… AX-5781589… AGCCGCG… M 2 1 2 ## 7 531501573 Affx-12… AX-5782382… TGGTGCA… R 2 1 2 ## 8 531421986 Affx-12… AX-5781588… ACGTT[C… Y 2 1 2 ## 9 531501574 Affx-12… AX-5782382… ATTGAAG… Y 2 1 2 ## 10 531422050 Affx-12… AX-5781589… GTGGCTT… K 2 1 2 ## # ℹ 582,716 more rows ## # ℹ 23 more variables: DesignNumber &lt;chr&gt;, Rank &lt;chr&gt;, Strand &lt;chr&gt;, ## # SetBack &lt;chr&gt;, taxonomy_key &lt;chr&gt;, organism &lt;chr&gt;, cust_id &lt;chr&gt;, ## # cust_chr &lt;chr&gt;, cust_pos &lt;chr&gt;, cust_ref &lt;chr&gt;, cust_alt &lt;chr&gt;, ## # cust_source &lt;chr&gt;, cust_gene_id &lt;chr&gt;, cust_gene_name &lt;chr&gt;, ## # cust_snptype &lt;chr&gt;, cust_other_id &lt;chr&gt;, cust_validation &lt;chr&gt;, ## # cust_cn_region &lt;chr&gt;, tiling_order &lt;chr&gt;, importance &lt;chr&gt;, … 2.3.2 Recommended SNPs SNPs recommended by ThermoFisher for both GG and ST #list of recommended SNPs for each sample set other_rec &lt;- read.table(&quot;data/raw/other_Recommended.ps&quot;, header = TRUE) south_rec &lt;- read.table(&quot;data/raw/south_Recommended.ps&quot;, header = TRUE) #merge recommended SNPs for each sample set combined_rec &lt;- merge(other_rec, south_rec) combined_rec %&gt;% head() ## probeset_id ## 1 AX-168593894 ## 2 AX-168612286 ## 3 AX-562727784 ## 4 AX-562727806 ## 5 AX-562727827 ## 6 AX-562728138 2.3.3 Quality control info Quality control data on SNPs from ThermoFisher #read in QC data for both data sets other_qc_snp &lt;- read.table(&quot;data/raw/other_Ps.performance.txt&quot;, fill = TRUE,header=TRUE) south_qc_snp &lt;- read.table(&quot;data/raw/south_Ps.performance.txt&quot;, fill = TRUE, header=TRUE) #add column of data_set - &quot;other&quot; or &quot;south_texas&quot; other_qc_snp$cluster &lt;- &quot;other&quot; south_qc_snp$cluster &lt;- &quot;south_texas&quot; #rbind qc data for both data sets qc_snp &lt;- rbind(other_qc_snp,south_qc_snp) #select only SNPs recommended for both clusters qc_snp_rec&lt;-merge(qc_snp,combined_rec) as_tibble(qc_snp_rec) ## # A tibble: 210,726 × 25 ## probeset_id affy_snp_id CR FLD HomFLD HetSO HomRO nMinorAllele Nclus ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 AX-168593894 Affx-1246881… 99.7 7.46 NA 0.952 3.53 2 2 ## 2 AX-168593894 Affx-1246881… 100 7.22 15.4 0.714 2.63 70 3 ## 3 AX-168612286 Affx-1245953… 98.7 5.97 12.2 0.518 2.64 86 3 ## 4 AX-168612286 Affx-1245953… 97.3 5.19 11.3 0.205 1.71 8 3 ## 5 AX-562727784 Affx-1246856… 98.7 4.94 NA -0.166 2.76 3 2 ## 6 AX-562727784 Affx-1246856… 99.5 6.52 15.1 0.508 2.90 26 3 ## 7 AX-562727806 Affx-1236504… 97.3 8.20 17.7 0.247 2.74 14 3 ## 8 AX-562727806 Affx-1236504… 99.7 9.11 19.1 0.756 3.11 368 3 ## 9 AX-562727827 Affx-1236504… 100 4.75 NA 1.30 2.10 2 3 ## 10 AX-562727827 Affx-1236504… 100 5.63 15.6 0.540 2.36 46 3 ## # ℹ 210,716 more rows ## # ℹ 16 more variables: n_AA &lt;int&gt;, n_AB &lt;int&gt;, n_BB &lt;int&gt;, n_NC &lt;int&gt;, ## # hemizygous &lt;int&gt;, specialSNP_chr &lt;chr&gt;, gender_metrics &lt;chr&gt;, ## # ConversionType &lt;chr&gt;, BestProbeset &lt;int&gt;, BestandRecommended &lt;int&gt;, ## # HomHet &lt;int&gt;, MMD &lt;dbl&gt;, MinorAlleleFrequency &lt;dbl&gt;, H.W.p.Value &lt;dbl&gt;, ## # H.W.chisquared.statistic &lt;dbl&gt;, cluster &lt;chr&gt; 2.3.4 Merge Files Consolidate information on SNPs into one file “snp_info_full.txt” #merge recommended and general info #note the final file has two rows for each SNP (based on whether it is in the &#39;other&#39; or &#39;south_texas&#39; cluster) snp_info_full &lt;- merge(combined_rec, snp_info) snp_info_full &lt;- merge(snp_info_full, qc_snp_rec) #remove &quot;-&quot; in probeset id snp_info_full$probeset_id &lt;- gsub(&quot;-&quot;,&quot;&quot;, snp_info_full$probeset_id) as_tibble(snp_info_full) ## # A tibble: 210,726 × 55 ## probeset_id ReporterKey Affx Sequence SNPType ProbeCount Tile Replicates ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 AX168593894 530224709 Affx-12… TTGTCTT… Y 2 1 2 ## 2 AX168593894 530224709 Affx-12… TTGTCTT… Y 2 1 2 ## 3 AX168612286 526588721 Affx-12… GTTTAAT… Y 2 1 2 ## 4 AX168612286 526588721 Affx-12… GTTTAAT… Y 2 1 2 ## 5 AX562727784 527308034 Affx-12… GAGGAAA… Y 2 1 2 ## 6 AX562727784 527308034 Affx-12… GAGGAAA… Y 2 1 2 ## 7 AX562727806 513178708 Affx-12… GCTAAGT… R 2 1 2 ## 8 AX562727806 513178708 Affx-12… GCTAAGT… R 2 1 2 ## 9 AX562727827 513178729 Affx-12… GGTCATG… Y 2 1 2 ## 10 AX562727827 513178729 Affx-12… GGTCATG… Y 2 1 2 ## # ℹ 210,716 more rows ## # ℹ 47 more variables: DesignNumber &lt;chr&gt;, Rank &lt;chr&gt;, Strand &lt;chr&gt;, ## # SetBack &lt;chr&gt;, taxonomy_key &lt;chr&gt;, organism &lt;chr&gt;, cust_id &lt;chr&gt;, ## # cust_chr &lt;chr&gt;, cust_pos &lt;chr&gt;, cust_ref &lt;chr&gt;, cust_alt &lt;chr&gt;, ## # cust_source &lt;chr&gt;, cust_gene_id &lt;chr&gt;, cust_gene_name &lt;chr&gt;, ## # cust_snptype &lt;chr&gt;, cust_other_id &lt;chr&gt;, cust_validation &lt;chr&gt;, ## # cust_cn_region &lt;chr&gt;, tiling_order &lt;chr&gt;, importance &lt;chr&gt;, … 2.3.5 Formatting for hierfstat and adegenet SNP data formatted so to be analyzed with the “hierfstat” and “adegenet” package Formatted to loci in 1 column #read in .cs files (takes a minute) Ncalls_other &lt;- read.table(&quot;data/raw/other_AxiomGT1.calls.txt&quot;, header = TRUE) Ncalls_south &lt;- read.table(&quot;data/raw/south_AxiomGT1.calls.txt&quot;, header = TRUE) #filter out only the rec SNPs from the calls data other_filtered &lt;- subset(Ncalls_other, probeset_id %in% combined_rec$probeset_id) south_filtered &lt;- subset(Ncalls_south, probeset_id %in% combined_rec$probeset_id) #transpose so individuals are rows and SNPs are columns other_filtered &lt;- as.data.frame(t(other_filtered)) south_filtered &lt;- as.data.frame(t(south_filtered)) #make the first row of the dataframe the column headers names(other_filtered) &lt;- other_filtered[1,] names(south_filtered) &lt;- south_filtered[1,] #delete the first row of the data set (only used as column headers) other_filtered&lt;- other_filtered[-1,] south_filtered&lt;- south_filtered[-1,] #Make vector of other/south individuals for later referencing other_inds &lt;- rownames(other_filtered) other_inds &lt;- gsub(&quot;\\\\.&quot;,&quot;&quot;, other_inds) other_inds &lt;- gsub(&quot;_&quot;,&quot;&quot;, other_inds) south_inds &lt;- rownames(south_filtered) south_inds &lt;- gsub(&quot;\\\\.&quot;,&quot;&quot;, south_inds) south_inds &lt;- gsub(&quot;_&quot;, &quot;&quot;, south_inds) ##set to eval=FALSE because takes so long ##Change allele codes. ###Warning: this takes a very long time (almost 1 hour). #For some reason there is whitespace around some of the values which causes problems when converting the values. Strip all leading/trailing white space other_filtered &lt;- other_filtered %&gt;% mutate(across(where(is.character), str_trim)) south_filtered &lt;- south_filtered %&gt;% mutate(across(where(is.character), str_trim)) #if value in dataframe is -1, change to NA ## -1 specifies a &#39;No Call&#39; other_filtered[other_filtered == -1] &lt;- NA south_filtered[south_filtered == -1] &lt;- NA # If code is 0 (AA) change to 11 other_filtered[other_filtered == 0] &lt;- &quot;11&quot; south_filtered[south_filtered == 0] &lt;- &quot;11&quot; #If code is 1 (AB) change to 12 other_filtered[other_filtered == 1] &lt;- &quot;12&quot; south_filtered[south_filtered == 1] &lt;- &quot;12&quot; # If code is 2 (BB) change to 22 other_filtered[other_filtered == 2] &lt;- &quot;22&quot; south_filtered[south_filtered == 2] &lt;- &quot;22&quot; #save formatted data files for other and south write.table(other_filtered, &quot;data/derived/cluster_other_formatted.txt&quot;, quote = FALSE, row.names = TRUE, col.names = TRUE, sep = &quot;\\t&quot;) write.table(south_filtered, &quot;data/derived/cluster_south_formatted.txt&quot;, quote = FALSE, row.names = TRUE, col.names = TRUE, sep = &quot;\\t&quot;) #read in formatted data files for other and south other_filtered &lt;- read.table(here::here(&quot;data&quot;,&quot;derived&quot;,&quot;cluster_other_formatted.txt&quot;)) south_filtered &lt;- read.table(here::here(&quot;data&quot;,&quot;derived&quot;,&quot;cluster_south_formatted.txt&quot;)) #Consolidate to one file - &quot;combined_filtered.txt&quot; # sort data frames to make sure columns are in the same order before combining other_filtered &lt;- other_filtered[,order(names(other_filtered))] south_filtered &lt;- south_filtered[,order(names(south_filtered))] # double check because I&#39;m paranoid cols1 &lt;- names(other_filtered) cols2 &lt;- names(south_filtered) identical(cols1, cols2) ## [1] TRUE #combine datasets combined_filtered &lt;- rbind(other_filtered, south_filtered) colnames(combined_filtered) &lt;- gsub(&quot;-&quot;,&quot;&quot;, colnames(combined_filtered)) colnames(combined_filtered) &lt;- gsub(&quot;\\\\.&quot;,&quot;&quot;, colnames(combined_filtered)) rownames(combined_filtered) &lt;- gsub(&quot;_&quot;,&quot;&quot;, rownames(combined_filtered)) rownames(combined_filtered) &lt;- gsub(&quot;\\\\.&quot;,&quot;&quot;, rownames(combined_filtered)) rownames(combined_filtered) &lt;- gsub(&quot;-&quot;,&quot;&quot;, rownames(combined_filtered)) 2.4 Save files #save sample_info_Full saveRDS(sample_info_full, file = here ::here(&quot;data&quot;,&quot;derived&quot;,&quot;sample_info_full&quot;)) #save_snp_info_full saveRDS(snp_info_full, file = here::here(&quot;data&quot;,&quot;derived&quot;,&quot;snp_info_full&quot;)) #save combined_filtered data file write.table(combined_filtered, &quot;data/derived/combined_filtered.txt&quot;, quote = FALSE, row.names = TRUE, col.names = TRUE, sep = &quot;\\t&quot;) "],["genetic-groups.html", "3 Genetic Groups 3.1 Objective: Assign individuals to genetic groups 3.2 Data Subsetting 3.3 Kmeans - All Wild Individuals 3.4 PCA - K groups 3.5 Kmeans and PCA with four groups 3.6 PCA - Four K groups 3.7 Assign Genetic Groups 3.8 Summary 3.9 Save files", " 3 Genetic Groups 3.1 Objective: Assign individuals to genetic groups Previous research has suggested that there are four different genetic clusters in the gulf: STX, nGOM, nFL (northern Florida), and genFL (general Florida). The objective of this section is to use the genotype data from the 600K SNP array to assign oysters to genetic groups. 3.2 Data Subsetting Read in SNP data – combined_filtered data set row names are individuals columns are loci cells are genotypes (11,12,21,22) combined_filtered &lt;-read.table(&quot;data/derived/combined_filtered.txt&quot;,header=TRUE) Read in Individual data – sample_info_full data set first column is individuals 52 other columns of descriptive information on individuals sample_info_full &lt;-read.table(&quot;data/derived/sample_info_full.txt&quot;,header=TRUE) Produce list of individuals that are from selected lines and take the individuals from the selected lines out of the SNP data set #Produce a list of individuals that are from selected lines (O&#39;Boy or Auburn selected lines) selected &lt;- sample_info_full %&gt;% filter(Collection_data %in% c(&quot;Auburn selected line 1&quot;, &quot;Auburn selected line 2&quot;, &quot;O&#39;Boy selected line&quot;)) %&gt;% pull(Sample) #Take the individuals from selected lines out of the SNP data set genotypes &lt;- combined_filtered %&gt;% filter(!row.names(.) %in% selected) Subset the SNP data set by selecting a random 20K SNPs should speed up analysis and be just as effective for genetic group assignment set.seed(54) combined_filtered_20K &lt;- genotypes %&gt;% select(sample(seq_len(ncol(.)), size = 20000,replace=FALSE)) 3.3 Kmeans - All Wild Individuals Prior groups need to be defined for DAPC identify groups initially using k-means clustering k-means is a clustering algorithm which finds a given number of groups that maximizes variation among groups k-means is run sequentially with increasing number of ks, and solutions can be compared using BIC ideally, lowest BIC is best clustering solution k-means can be done much faster on the PCA data than the raw data transform the data using PCA with the find.clusters function, asks the user to specify the number of retained PCS interactively First, Convert SNP data to a genind object #convert SNP data to genind gen1 &lt;- df2genind(combined_filtered_20K, ncode = 1, sep = &quot;&quot;, NA.char = NA, ploidy = 2) gen1 ## /// GENIND OBJECT ///////// ## ## // 380 individuals; 20,000 loci; 38,841 alleles; size: 66.8 Mb ## ## // Basic content ## @tab: 380 x 38841 matrix of allele counts ## @loc.n.all: number of alleles per locus (range: 1-2) ## @loc.fac: locus factor for the 38841 columns of @tab ## @all.names: list of allele names for each locus ## @ploidy: ploidy of each individual (range: 2-2) ## @type: codom ## @call: df2genind(X = combined_filtered_20K, sep = &quot;&quot;, ncode = 1, NA.char = NA, ## ploidy = 2) ## ## // Optional content ## - empty - Use find.clusters to identify groups via k-means clustering grp &lt;- find.clusters(gen1, n.pca = 500, choose = FALSE, max.n.clust = 5) # retain 500 PCs, retain 3 clusters plot(grp$Kstat, type=&quot;o&quot;, xlab=&quot;number of clusters (K)&quot;, ylab=&quot;BIC&quot;, col=&quot;blue&quot;, main=&quot;Detection based on BIC&quot;) Looks like there are three or four groups Choose three clusters grp &lt;- find.clusters(gen1, n.pca = 500, n.clust = 3) grp$size ## [1] 62 98 220 Use the k-means clustering and the sample metadata to create a tibble that contains the 380 individuals that are wild collected and 54 columns of descriptive information, including the kmeans group assignment “k_group” # Returns data frame of individuals and their k-means assignment x &lt;- as_tibble(grp$grp,rownames=NA) %&gt;% rownames_to_column(.,var=&quot;Sample&quot;) %&gt;% rename(k_group = value) Make a data set that only has wild individuals sample_info_wild &lt;- sample_info_full %&gt;% filter(! Collection_data %in% c(&quot;Auburn selected line 1&quot;, &quot;Auburn selected line 2&quot;, &quot;O&#39;Boy selected line&quot;)) Add a column of k_means group to data on individuals sample_data &lt;- sample_info_wild %&gt;% left_join(., x, by = &quot;Sample&quot;) 3.4 PCA - K groups Use PCAs to confirm there are 3 groups as identified by k means #identify each individual to each k group in the genind kg&lt;-sample_data %&gt;% select(Sample,k_group) # Assign strata to genind strata(gen1) &lt;- kg[match(indNames(gen1),sample_data$Sample),] # set pop to GG/STX setPop(gen1) &lt;- ~k_group #Check PCA eigenvalues x&lt;- scaleGen(gen1, NA.method = &quot;mean&quot;) # Plot a PCA pca &lt;- dudi.pca(x,cent=FALSE,scale=FALSE,scannf=FALSE,nf=4) #plot1 barplot(pca$eig[1:50],main=&quot;All_Samples_PCA_eigenvalues&quot;, col=heat.colors(50)) #extract PCs for individuals PC_ind &lt;- PC.ind(pca) eig &lt;- eigenvalues(pca) #associate metadata with individuals PC_ind &lt;- PC_ind %&gt;% rename(Sample=Sample_ID) %&gt;% left_join(.,sample_data,by=&quot;Sample&quot;) pctot12 &lt;- ggplot(PC_ind, aes(x = Axis1, y = Axis2, color = k_group)) + #geom_text(size=3)+ geom_point(alpha = 0.75, size = 2) + labs(x = paste(&quot;PC1:&quot;, round(eig[1, 3], digits = 3), &quot;%&quot;), y = paste(&quot;PC2:&quot;, round(eig[2, 3], digits = 3), &quot;%&quot;))+ scale_color_hue(direction = -1)+ ggtitle(&quot;All_Samples_Axis2vs.Axis1&quot;) pctot12 Figure 3.1: All Individuals PC1 vs. PC2 Re-run PCA without k_group 1 (very different from rest) #remove k_group 1 gen2 &lt;- gen1[!gen1@strata$k_group %in% 1] #Check PCA eigenvalues x&lt;- scaleGen(gen2, NA.method = &quot;mean&quot;) # Plot a PCA pca &lt;- dudi.pca(x,cent=FALSE,scale=FALSE,scannf=FALSE,nf=4) #plot1 barplot(pca$eig[1:50],main=&quot;All_Samples_PCA_eigenvalues&quot;, col=heat.colors(50)) #extract PCs for individuals PC_ind &lt;- PC.ind(pca) eig &lt;- eigenvalues(pca) #associate metadata with individuals PC_ind &lt;- PC_ind %&gt;% rename(Sample=Sample_ID) %&gt;% left_join(.,sample_data,by=&quot;Sample&quot;) pctot12 &lt;- ggplot(PC_ind, aes(x = Axis1, y = Axis2, color = k_group)) + #geom_text(size=3)+ geom_point(alpha = 0.75, size = 2) + labs(x = paste(&quot;PC1:&quot;, round(eig[1, 3], digits = 3), &quot;%&quot;), y = paste(&quot;PC2:&quot;, round(eig[2, 3], digits = 3), &quot;%&quot;))+ scale_color_hue(direction = -1)+ ggtitle(&quot;All_Samples_Axis2vs.Axis1&quot;) pctot12 Figure 3.2: All Individuals PC1 vs. PC2 Looks like at least three groups in the PCA above Worth evaluating the PCA if choosing four groups 3.5 Kmeans and PCA with four groups #choose four clusters grp &lt;- find.clusters(gen1, n.pca = 500, n.clust = 4) grp$size ## [1] 62 33 68 217 Use the k-means clustering and the sample metadata to create a tibble that contains the 380 individuals that are wild collected and 54 columns of descriptive information, including the kmeans group assignment “k_group” # Returns data frame of individuals and their k-means assignment x &lt;- as_tibble(grp$grp,rownames=NA) %&gt;% rownames_to_column(.,var=&quot;Sample&quot;) %&gt;% rename(k_group = value) # add a column of k_means group to data on individuals sample_data &lt;- sample_info_wild %&gt;% left_join(., x, by = &quot;Sample&quot;) 3.6 PCA - Four K groups Use PCAs to confirm there are 4 groups #identify each individual to each k group in the genind kg&lt;-sample_data %&gt;% select(Sample,k_group) # Assign strata to genind strata(gen1) &lt;- kg[match(indNames(gen1),sample_data$Sample),] # set pop to GG/STX setPop(gen1) &lt;- ~k_group #Check PCA eigenvalues x&lt;- scaleGen(gen1, NA.method = &quot;mean&quot;) # Plot a PCA pca &lt;- dudi.pca(x,cent=FALSE,scale=FALSE,scannf=FALSE,nf=4) #plot1 barplot(pca$eig[1:50],main=&quot;All_Samples_PCA_eigenvalues&quot;, col=heat.colors(50)) #extract PCs for individuals PC_ind &lt;- PC.ind(pca) eig &lt;- eigenvalues(pca) #associate metadata with individuals PC_ind &lt;- PC_ind %&gt;% rename(Sample=Sample_ID) %&gt;% left_join(.,sample_data,by=&quot;Sample&quot;) pctot12 &lt;- ggplot(PC_ind, aes(x = Axis1, y = Axis2, color = k_group)) + #geom_text(size=3)+ geom_point(alpha = 0.75, size = 2) + labs(x = paste(&quot;PC1:&quot;, round(eig[1, 3], digits = 3), &quot;%&quot;), y = paste(&quot;PC2:&quot;, round(eig[2, 3], digits = 3), &quot;%&quot;))+ scale_color_hue(direction = -1)+ ggtitle(&quot;All_Samples_Axis2vs.Axis1&quot;) pctot12 Figure 3.3: All Individuals PC1 vs. PC2 I would say there are four groups based on the K means + PCA. Proceed with these four. 3.7 Assign Genetic Groups First, investigate each k_group and give it a common name based on geographic origin of the majority of the individuals #K_group1 sample_data %&gt;% filter(k_group == 1) %&gt;% count(SampleOrigin,Geographic_state,Geographic_location, Geographic_code) ## SampleOrigin Geographic_state Geographic_location Geographic_code n ## 1 South-Texas Texas Corpus Christi Bay CCTX 6 ## 2 South-Texas Texas Port Mansfield PMTX 17 ## 3 South-Texas Texas Upper Laguna Madre ULTX 39 MainStates &lt;- map_data(&quot;state&quot;) ggplot()+ geom_polygon(data=MainStates,aes(x=long,y=lat,group=group),fill=&quot;lightgray&quot;, color=&quot;black&quot;) + theme_bw()+ theme(panel.grid.major = element_blank())+ theme(panel.grid.minor = element_blank())+ coord_cartesian(xlim=c(-99.830000,-79.783711), ylim = c(24.783218,30.858945)) + geom_point(data = sample_data %&gt;% mutate(latitude2 = round(latitude,3)) %&gt;% mutate(longitude2 = round(longitude,3)) %&gt;% count(k_group,Geographic_code,longitude2,latitude2) %&gt;% mutate_at(c(&#39;longitude2&#39;, &#39;latitude2&#39;), as.numeric) %&gt;% filter(k_group == 1), #counts for proportional representation aes(y = latitude2, x = longitude2, group=Geographic_code,size = n), colour= &quot;forestgreen&quot;, stroke=0.5) k_group 1 is south texas #k group 2 sample_data %&gt;% filter(k_group == 2) %&gt;% count(SampleOrigin,Geographic_state,Geographic_location, Geographic_code) ## SampleOrigin Geographic_state Geographic_location Geographic_code n ## 1 Broodstock Alabama Alligator Lake ALAL 2 ## 2 Broodstock Florida Alligator Harbor AHFL 9 ## 3 Broodstock Florida Oyster Bay OBFL 10 ## 4 Broodstock Florida Pensacola Bay PBFL 12 ggplot()+ geom_polygon(data=MainStates,aes(x=long,y=lat,group=group),fill=&quot;lightgray&quot;, color=&quot;black&quot;) + theme_bw()+ theme(panel.grid.major = element_blank())+ theme(panel.grid.minor = element_blank())+ coord_cartesian(xlim=c(-99.830000,-79.783711), ylim = c(24.783218,30.858945)) + geom_point(data = sample_data %&gt;% mutate(latitude2 = round(latitude,3)) %&gt;% mutate(longitude2 = round(longitude,3)) %&gt;% count(k_group,Geographic_code,longitude2,latitude2) %&gt;% mutate_at(c(&#39;longitude2&#39;, &#39;latitude2&#39;), as.numeric) %&gt;% filter(k_group == 2), #counts for proportional representation aes(y = latitude2, x = longitude2, group=Geographic_code,size = n), colour= &quot;forestgreen&quot;, stroke=0.5) k_group 2 is north florida (nfl) sample_data %&gt;% filter(k_group == 3) %&gt;% count(SampleOrigin,Geographic_state,Geographic_location,Geographic_code) ## SampleOrigin Geographic_state Geographic_location ## 1 Backwater-Bay-FL Florida Backwater Bay ## 2 Broodstock Florida Alligator Harbor ## 3 Broodstock Florida Corrigan Reef ## 4 Broodstock Florida Seahorse Key ## 5 Broodstock Florida Suwannee River ## 6 South-Florida Florida Boca Ciega Bay Aquatic Preserve ## 7 South-Florida Florida Caloosahatchee River ## 8 South-Florida Florida Madelaine Key ## 9 South-Florida Florida Tampa Bay ## 10 South-Texas Texas Port Mansfield ## Geographic_code n ## 1 BWBFL 24 ## 2 AHFL 1 ## 3 CRFL 10 ## 4 SKFL 10 ## 5 LRFL 10 ## 6 BCFL 3 ## 7 CAFL 4 ## 8 MKFL 2 ## 9 TBFL 2 ## 10 PMTX 2 ggplot()+ geom_polygon(data=MainStates,aes(x=long,y=lat,group=group),fill=&quot;lightgray&quot;, color=&quot;black&quot;) + theme_bw()+ theme(panel.grid.major = element_blank())+ theme(panel.grid.minor = element_blank())+ coord_cartesian(xlim=c(-99.830000,-79.783711), ylim = c(24.783218,30.858945)) + geom_point(data = sample_data %&gt;% mutate(latitude2 = round(latitude,3)) %&gt;% mutate(longitude2 = round(longitude,3)) %&gt;% count(k_group,Geographic_code,longitude2,latitude2) %&gt;% mutate_at(c(&#39;longitude2&#39;, &#39;latitude2&#39;), as.numeric) %&gt;% filter(k_group == 3), #counts for proportional representation aes(y = latitude2, x = longitude2, group=Geographic_code,size = n), colour= &quot;forestgreen&quot;, stroke=0.5) k_group 3 is general florida (gfl) sample_data %&gt;% filter(k_group == 4) %&gt;% count(SampleOrigin,Geographic_state,Geographic_location,Geographic_code) ## SampleOrigin Geographic_state Geographic_location Geographic_code n ## 1 Broodstock Alabama Alligator Lake ALAL 16 ## 2 Broodstock Alabama Cedar Point CPAL 20 ## 3 Broodstock Florida Pensacola Bay PBFL 2 ## 4 Broodstock Louisiana Caillou Lake SLLA 22 ## 5 Broodstock Louisiana Calcasieu Lake LCLA 24 ## 6 Broodstock Mississippi Pascagoula River PSMS 27 ## 7 Broodstock Texas East Galveston Bay EGTX 15 ## 8 Broodstock Texas East Matagorda Bay EMTX 18 ## 9 Broodstock Texas Sabine Pass LSTX 23 ## 10 Broodstock Texas San Antonio Bay SATX 11 ## 11 Broodstock Texas West Galveston Bay WGTX 10 ## 12 Broodstock Texas West Matagorda Bay WMTX 16 ## 13 South-Florida Florida Tampa Bay TBFL 2 ## 14 South-Texas Texas Corpus Christi Bay CCTX 8 ## 15 South-Texas Texas Upper Laguna Madre ULTX 3 ggplot()+ geom_polygon(data=MainStates,aes(x=long,y=lat,group=group),fill=&quot;lightgray&quot;, color=&quot;black&quot;) + theme_bw()+ theme(panel.grid.major = element_blank())+ theme(panel.grid.minor = element_blank())+ coord_cartesian(xlim=c(-99.830000,-79.783711), ylim = c(24.783218,30.858945)) + geom_point(data = sample_data %&gt;% mutate(latitude2 = round(latitude,3)) %&gt;% mutate(longitude2 = round(longitude,3)) %&gt;% count(k_group,Geographic_code,longitude2,latitude2) %&gt;% mutate_at(c(&#39;longitude2&#39;, &#39;latitude2&#39;), as.numeric) %&gt;% filter(k_group == 4), #counts for proportional representation aes(y = latitude2, x = longitude2, group=Geographic_code,size = n), colour= &quot;forestgreen&quot;, stroke=0.5) k_group 4 is northern gulf of mexico (ngom) Add column in data file that specifies each “k_group” with “genetic group” sample_data &lt;- sample_data %&gt;% mutate(gen_group = case_when( k_group == 1 ~ &quot;stx&quot;, k_group == 2 ~ &quot;nfl&quot;, k_group == 3 ~ &quot;gfl&quot;, k_group == 4 ~ &quot;ngom&quot;)) 3.8 Summary The script above takes all of the individuals in the array data and assigns them to genetic groups via kmeans clustering using 20K randomly selected snps. The data is in the “sample_data” tibble. The genetic groups are defined as below: stx = south texas ngom = northern gulf of mexico nfl = northern florida sfl = southern florida The table below (“summary”) summarizes the data summary&lt;- sample_data %&gt;% select(Sample,sample_id,Geographic_code,Geographic_state,gen_group) %&gt;% group_by(Geographic_state,gen_group) %&gt;% count() %&gt;% rename(sample_location = Geographic_state, genetic_group = gen_group) 3.9 Save files #save file of individual data without selected individuals and with genetic groups assigned through k_means saveRDS(sample_data, file = &quot;data//derived//sample_data&quot;) #save file of SNP data without selected individuals saveRDS(genotypes, file = &quot;data//derived//genotypes&quot;) saveRDS(combined_filtered_20K, file = &quot;data//derived//combined_filtered_20K&quot;) "],["select-candidate-snps.html", "4 Select Candidate SNPs 4.1 Objective: Identify candidate SNPs by 4.2 Read in Data 4.3 Format Data 4.4 HWE filtering 4.5 Select population diagnostic loci 4.6 nGOM vs. FL 4.7 MAF 4.8 Save files", " 4 Select Candidate SNPs 4.1 Objective: Identify candidate SNPs by filtering those out of Hardy Weinberg Equilibrium selecting population diagnostic SNPs for genetic groups selecting snps with high minor allele frequencies 4.2 Read in Data SNP Data from 02_genetic_assignment genotypes &lt;-readRDS(here::here(&quot;data&quot;,&quot;derived&quot;,&quot;genotypes&quot;)) Individual Data from 02_genetic_assignment sample_data &lt;-readRDS(here::here(&quot;data&quot;,&quot;derived&quot;,&quot;sample_data&quot;)) 4.3 Format Data 4.3.1 Make genind object from 105K SNPs gind &lt;- df2genind(genotypes, ncode = 1, sep = &quot;&quot;, NA.char = NA, ploidy = 2) 4.3.2 Make a dataframe specifying genetic group and “metapop.” genetic group: individual north florida (nfl), general florida (gfl), northern Gulf of Mexico group (ngom), or from the south Texas group (stx) based on k_means data, metapop: individual from gulf (ngom or fl) or south texas sample_data_groups &lt;- sample_data %&gt;% mutate(k_group_name = case_when( k_group == 1 ~ &quot;stx&quot;, k_group == 2 ~ &quot;nfl&quot;, k_group == 3 ~ &quot;gfl&quot;, k_group == 4 ~ &quot;ngom&quot;)) %&gt;% mutate(mpop = case_when( k_group == 1 ~ &quot;stx&quot;, k_group == 2 ~ &quot;gulf&quot;, k_group == 3 ~ &quot;gulf&quot;, k_group == 4 ~ &quot;gulf&quot;)) 4.3.3 Assign populations to genind object #put strata in gind that has the names of individuals and their populations in the same order as individuals are listed in indNames(gind) strata(gind) &lt;- sample_data_groups %&gt;% select(Sample, k_group_name,mpop) %&gt;% .[match(indNames(gind), .$Sample),] #make pop for gind setPop(gind) &lt;- ~k_group_name ## [1] &quot;ngom&quot; &quot;ngom&quot; &quot;ngom&quot; &quot;ngom&quot; &quot;ngom&quot; &quot;ngom&quot; &quot;ngom&quot; &quot;nfl&quot; &quot;ngom&quot; &quot;gfl&quot; ## [11] &quot;gfl&quot; &quot;gfl&quot; &quot;gfl&quot; &quot;gfl&quot; The check was successful, seems populations appopriately assigned 4.3.4 Format data into the hierfstat format for analysis of heterozygosity and MAF #if pop=NULL, pop assigned based on what is in the pop slot of the genind object hgen&lt;-genind2hierfstat(gind, pop=NULL) b_stats &lt;- basic.stats(hgen,diploid=TRUE,digits=4) # Heterozygosities per loci in each group as_tibble(b_stats$Ho, rownames= NA) %&gt;% rownames_to_column() ## # A tibble: 105,363 × 5 ## rowname ngom nfl gfl stx ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AX168593894 0 0 0.0147 0.387 ## 2 AX168612286 0.165 0.182 0.224 0.0328 ## 3 AX562727784 0.0324 0.125 0.132 0.0328 ## 4 AX562727806 0.406 0.576 0.485 0.0645 ## 5 AX562727827 0.157 0.0909 0.0294 0.113 ## 6 AX562728138 0.437 0.469 0.554 0.361 ## 7 AX562728433 0.439 0.394 0.368 0.113 ## 8 AX562728724 0.539 0.546 0.368 0.0484 ## 9 AX562728798 0.088 0.424 0.397 0 ## 10 AX562728875 0.130 0.242 0.176 0.833 ## # ℹ 105,353 more rows hist(b_stats$Ho[,1], main=&quot;stx&quot;) hist(b_stats$Ho[,2], main=&quot;nfl&quot;) hist(b_stats$Ho[,3], main=&quot;gfl&quot;) hist(b_stats$Ho[,4], main=&quot;ngom&quot;) 4.4 HWE filtering 4.4.1 Filtering out the loci with Ho &gt; 0.5 0.5 is the maximum Hardy-Weinberg heterozygosity at a biallelic locus, so exclude loci in excess of 0.5 Ho (e.g, Keller et al. 2013) Remove SNPs with Ho greater than 0.5 in any genetic group #remove the loci names for those with Ho greater than 0.5 #the loci are taken from the $Ho specification in the hierfstat package hiH_loci &lt;- as.data.frame(b_stats$Ho) %&gt;% filter_all(any_vars(. &gt; 0.5)) %&gt;% row.names(.) hgen2 &lt;- hgen %&gt;% select(!all_of(hiH_loci)) 4.4.2 Re-analyze the data for heterozygosities b_stats2 &lt;- basic.stats(hgen2,diploid=TRUE,digits=4) # Heterozygosities per loci in each group as_tibble(b_stats2$Ho, rownames= NA) %&gt;% rownames_to_column() ## # A tibble: 91,310 × 5 ## rowname ngom nfl gfl stx ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AX168593894 0 0 0.0147 0.387 ## 2 AX168612286 0.165 0.182 0.224 0.0328 ## 3 AX562727784 0.0324 0.125 0.132 0.0328 ## 4 AX562727827 0.157 0.0909 0.0294 0.113 ## 5 AX562728433 0.439 0.394 0.368 0.113 ## 6 AX562728798 0.088 0.424 0.397 0 ## 7 AX562729352 0.0323 0 0.0147 0 ## 8 AX562729356 0.444 0.273 0.235 0.131 ## 9 AX562729364 0.335 0.375 0.382 0.0484 ## 10 AX562729453 0.380 0.281 0.403 0.117 ## # ℹ 91,300 more rows hist(b_stats2$Ho[,1], main=&quot;stx&quot;) hist(b_stats2$Ho[,2], main=&quot;nfl&quot;) hist(b_stats2$Ho[,3], main=&quot;gfl&quot;) hist(b_stats2$Ho[,4], main=&quot;ngom&quot;) 4.4.3 Make genind object without the loci that have heterozygosities over 0.5 gind_0.5&lt;-genind.rem.loci(gind,hiH_loci) 4.4.4 Make genotypes data frame without the loci that have heterozygosities over 0.5 genotypes_0.5 &lt;- genotypes %&gt;% select(! all_of(hiH_loci)) 4.4.5 HW test Much of code followed from website: https://grunwaldlab.github.io/Population_Genetics_in_R/Locus_Stats.html Start with a genind object that only contains the 94391 loci that pass the initial HWE test – gind_0.5 #eval set to false because takes so long #WARNING: this chunk takes a long time #hardy weinberg test on each pop seperately #seppop from adegenet #hw.test from pegas package hwe.pop &lt;- seppop(gind_0.5) %&gt;% lapply(hw.test, B=0) #save in case don&#39;t want to re-run the above chunk saveRDS(hwe.pop, file = here::here(&quot;data&quot;,&quot;derived&quot;,&quot;hwepop&quot;)) #load file so as to save time producing it hwe.pop &lt;- readRDS(file = here::here(&quot;data&quot;,&quot;derived&quot;,&quot;hwepop&quot;)) 4.4.5.1 Exmaine matrix of each loci and p values #matrix of each loci and p values hwe.mat &lt;- sapply(hwe.pop, &quot;[&quot;, i = TRUE, j = 3) head(hwe.mat) ## ngom nfl gfl stx ## AX168593894 1.000000000 1.0000000 0.95129307 2.236453e-01 ## AX168612286 0.001366327 0.3998576 0.21052579 3.932973e-07 ## AX562727784 0.808728076 0.7060817 0.05312365 8.964313e-01 ## AX562727827 0.126460984 0.7844300 0.90204551 6.375733e-01 ## AX562728433 0.331596110 0.8218619 0.71336337 6.375733e-01 ## AX562728798 0.471347746 0.3732473 0.20724211 1.000000e+00 alpha &lt;- 0.05 hmmat &lt;- hwe.mat hmmat[hmmat &gt; alpha] &lt;- 1 levelplot(hmmat,aspect=&quot;fill&quot;) Purplse denotes alleles that have p &gt; 0.05 from hw.test (cannot be rejected as out of HWE), white are those with p &lt;= 0.05 (can be rejected as out of HWE) 4.4.6 Select loci that fail HWE test (p &lt; 0.05) # HWE per loci in each group as_tibble(hmmat, rownames= NA) %&gt;% rownames_to_column() ## # A tibble: 91,310 × 5 ## rowname ngom nfl gfl stx ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AX168593894 1 1 1 1 ## 2 AX168612286 0.00137 1 1 0.000000393 ## 3 AX562727784 1 1 1 1 ## 4 AX562727827 1 1 1 1 ## 5 AX562728433 1 1 1 1 ## 6 AX562728798 1 1 1 1 ## 7 AX562729352 1 1 1 1 ## 8 AX562729356 1 1 1 1 ## 9 AX562729364 1 1 1 1 ## 10 AX562729453 1 1 1 1 ## # ℹ 91,300 more rows #select all loci here that are not in HW out_hw&lt;-as_tibble(hmmat,rownames=NA) %&gt;% rownames_to_column() %&gt;% rowwise() %&gt;% mutate(pass = sum(c(ngom,gfl,nfl,stx))) %&gt;% filter(pass &lt; 4) %&gt;% # if all pass HW test, then sum of last column, &quot;pass&quot;, is 3 select(rowname) %&gt;% .$rowname 4.4.7 Remove loci out of HWE from the genind object and genotypes data frame gind_0.5_hw&lt;-genind.rem.loci(gind_0.5,out_hw) genotypes_0.5_hw &lt;- genotypes_0.5 %&gt;% select(! all_of(out_hw)) 4.5 Select population diagnostic loci 4.5.1 South Texas vs. Gulf #make hierfstat object for stx vs. gulf (pop=mpop) setPop(gind_0.5_hw) &lt;- ~mpop hgen3 &lt;- genind2hierfstat(gind_0.5_hw, pop= NULL) #calculate basic pop gen stats (clusters) b_stats &lt;- basic.stats(hgen3,diploid=TRUE,digits=4) #histogram of FST for all loci hist(b_stats$perloc$Fst, main=&quot;Fst&quot;, xlab=&quot;loci&quot;) Range of Fst range(b_stats$perloc$Fst,na.rm=TRUE) ## [1] -0.0033 0.9811 Loci with Fst &gt;= 0.9 sum(b_stats$perloc$Fst &gt;= 0.9,na.rm=TRUE) ## [1] 237 PCAs_High_Fsts #order SNPs by Fst bstats_ord &lt;- b_stats$perloc[order(b_stats$perloc$Fst, decreasing = TRUE),] #select SNPs to drop based on Fst Fst500_drop &lt;- bstats_ord %&gt;% slice(501:nrow(.)) %&gt;% row.names(.) Fst200_drop &lt;- bstats_ord %&gt;% slice(201:nrow(.)) %&gt;% row.names(.) Fst100_drop &lt;- bstats_ord %&gt;% slice(101:nrow(.)) %&gt;% row.names(.) Fst50_drop &lt;- bstats_ord %&gt;% slice(51:nrow(.)) %&gt;% row.names(.) Fst25_drop &lt;- bstats_ord %&gt;% slice(26:nrow(.)) %&gt;% row.names(.) #manipulate genind object (gen_groups_Ho_Hw) to only include the SNPs with highest Fsts genobj &lt;- gind_0.5_hw hiF_500 &lt;- genind.rem.loci(genobj,Fst500_drop) hiF_200 &lt;- genind.rem.loci(genobj,Fst200_drop) hiF_100 &lt;- genind.rem.loci(genobj,Fst100_drop) hiF_50 &lt;- genind.rem.loci(genobj,Fst50_drop) hiF_25 &lt;- genind.rem.loci(genobj,Fst25_drop) x1 &lt;- scaleGen(hiF_500, NA.method = &quot;mean&quot;) x2 &lt;- scaleGen(hiF_200, NA.method = &quot;mean&quot;) x3 &lt;- scaleGen(hiF_100, NA.method = &quot;mean&quot;) x4 &lt;- scaleGen(hiF_50, NA.method = &quot;mean&quot;) x5 &lt;- scaleGen(hiF_25, NA.method = &quot;mean&quot;) pca1 &lt;- dudi.pca(x1,cent=FALSE,scale=FALSE,scannf=FALSE,nf=4) pca2 &lt;- dudi.pca(x2,cent=FALSE,scale=FALSE,scannf=FALSE,nf=4) pca3 &lt;- dudi.pca(x3,cent=FALSE,scale=FALSE,scannf=FALSE,nf=4) pca4 &lt;- dudi.pca(x4,cent=FALSE,scale=FALSE,scannf=FALSE,nf=4) pca5 &lt;- dudi.pca(x5,cent=FALSE,scale=FALSE,scannf=FALSE,nf=4) eig1&lt;-barplot(pca1$eig[1:50],main=&quot;PCA eigenvalues500&quot;, col=heat.colors(50)) eig2&lt;-barplot(pca2$eig[1:50],main=&quot;PCA eigenvalues200&quot;, col=heat.colors(50)) eig3&lt;-barplot(pca3$eig[1:50],main=&quot;PCA eigenvalues100&quot;, col=heat.colors(50)) eig4&lt;-barplot(pca4$eig[1:50],main=&quot;PCA eigenvalues50&quot;, col=heat.colors(50)) eig5&lt;-barplot(pca5$eig[1:50],main=&quot;PCA eigenvalues25&quot;, col=heat.colors(50)) PCAs #500 SNPs PC_ind &lt;- PC.ind(pca1) eig &lt;- eigenvalues(pca1) #rename &quot;Sample_ID&quot; in PC_ind to &quot;INDV&quot; PC_ind &lt;- PC_ind %&gt;% rename(Sample=Sample_ID) PC_ind &lt;- merge(PC_ind,sample_data_groups,by = &quot;Sample&quot;) pc500 &lt;- ggplot(PC_ind, aes(x = Axis1, y = Axis2, color = k_group_name)) + geom_point(alpha = 0.75, size = 2) + labs(x = paste(&quot;PC1:&quot;, round(eig[1, 3], digits = 3), &quot;%&quot;), y = paste(&quot;PC2:&quot;, round(eig[2, 3], digits = 3), &quot;%&quot;))+ ggtitle(&quot;500 SNPs&quot;) + scale_color_hue(direction = -1) pc500 #200 SNPs PC_ind &lt;- PC.ind(pca2) eig &lt;- eigenvalues(pca2) #rename &quot;Sample_ID&quot; in PC_ind to &quot;INDV&quot; PC_ind &lt;- PC_ind %&gt;% rename(Sample=Sample_ID) PC_ind &lt;- merge(PC_ind,sample_data_groups,by = &quot;Sample&quot;) #might need to change the name of the column listing individuals in PC_ind to match sample_info to make these merge properly pc200 &lt;- ggplot(PC_ind, aes(x = Axis1, y = Axis2, color = k_group_name)) + geom_point(alpha = 0.75, size = 2) + labs(x = paste(&quot;PC1:&quot;, round(eig[1, 3], digits = 3), &quot;%&quot;), y = paste(&quot;PC2:&quot;, round(eig[2, 3], digits = 3), &quot;%&quot;))+ ggtitle(&quot;200 SNPs&quot;) + scale_color_hue(direction = -1) pc200 #100 SNPs PC_ind &lt;- PC.ind(pca3) eig &lt;- eigenvalues(pca3) #rename &quot;Sample_ID&quot; in PC_ind to &quot;INDV&quot; PC_ind &lt;- PC_ind %&gt;% rename(Sample=Sample_ID) PC_ind &lt;- merge(PC_ind,sample_data_groups,by = &quot;Sample&quot;) #might need to change the name of the column listing individuals in PC_ind to match sample_info to make these merge properly pc100 &lt;- ggplot(PC_ind, aes(x = Axis1, y = Axis2, color = k_group_name)) + geom_point(alpha = 0.75, size = 2) + labs(x = paste(&quot;PC1:&quot;, round(eig[1, 3], digits = 3), &quot;%&quot;), y = paste(&quot;PC2:&quot;, round(eig[2, 3], digits = 3), &quot;%&quot;))+ ggtitle(&quot;100 SNPs&quot;) + scale_color_hue(direction = -1) pc100 #50 SNPs PC_ind &lt;- PC.ind(pca4) eig &lt;- eigenvalues(pca4) #rename &quot;Sample_ID&quot; in PC_ind to &quot;INDV&quot; PC_ind &lt;- PC_ind %&gt;% rename(Sample=Sample_ID) PC_ind &lt;- merge(PC_ind,sample_data_groups,by = &quot;Sample&quot;) #might need to change the name of the column listing individuals in PC_ind to match sample_info to make these merge properly pc50 &lt;- ggplot(PC_ind, aes(x = Axis1, y = Axis2, color = k_group_name)) + geom_point(alpha = 0.75, size = 2) + labs(x = paste(&quot;PC1:&quot;, round(eig[1, 3], digits = 3), &quot;%&quot;), y = paste(&quot;PC2:&quot;, round(eig[2, 3], digits = 3), &quot;%&quot;))+ ggtitle(&quot;50 SNPs&quot;) + scale_color_hue(direction = -1) pc50 #25 SNPs PC_ind &lt;- PC.ind(pca5) eig &lt;- eigenvalues(pca5) #rename &quot;Sample_ID&quot; in PC_ind to &quot;INDV&quot; PC_ind &lt;- PC_ind %&gt;% rename(Sample=Sample_ID) PC_ind &lt;- merge(PC_ind,sample_data_groups,by = &quot;Sample&quot;) #might need to change the name of the column listing individuals in PC_ind to match sample_info to make these merge properly pc25 &lt;- ggplot(PC_ind, aes(x = Axis1, y = Axis2, color = k_group_name)) + geom_point(alpha = 0.75, size = 2) + labs(x = paste(&quot;PC1:&quot;, round(eig[1, 3], digits = 3), &quot;%&quot;), y = paste(&quot;PC2:&quot;, round(eig[2, 3], digits = 3), &quot;%&quot;))+ ggtitle(&quot;25 SNPs&quot;) + scale_color_hue(direction = -1) pc25 4.5.2 Select 25 SNPs that distinguish stx from gulf #25 SNPs with highest Fst for differentiating Gulf meta_clusters stxvgulf_25&lt;- locNames(hiF_25) 4.6 nGOM vs. FL Filter out individuals from stx genotypes_gulf &lt;- genotypes_0.5_hw %&gt;% filter(!row.names(.) %in% sample_data_groups$Sample[sample_data_groups$k_group_name == &quot;stx&quot;],) gind_0.5_hw_gulf &lt;- df2genind(genotypes_gulf, ncode = 1, sep = &quot;&quot;, NA.char = NA, ploidy = 2) #put strata in gind that has the names of individuals and their populations in the same order as individuals are listed in indNames(gind) strata(gind_0.5_hw_gulf) &lt;- sample_data_groups %&gt;% select(Sample, k_group_name,mpop) %&gt;% .[match(indNames(gind_0.5_hw_gulf), .$Sample),] #make pop for gind setPop(gind_0.5_hw_gulf) &lt;- ~k_group_name hgen4 &lt;- genind2hierfstat(gind_0.5_hw_gulf, pop= NULL) Examine fsts #calculate basic pop gen stats (clusters) b_stats &lt;- basic.stats(hgen4,diploid=TRUE,digits=4) #histogram of FST for all loci hist(b_stats$perloc$Fst, main=&quot;Fst&quot;, xlab=&quot;loci&quot;) Range of Fst range(b_stats$perloc$Fst,na.rm=TRUE) ## [1] -0.0068 0.7363 Loci with Fst &gt;= 0.7 sum(b_stats$perloc$Fst &gt;= 0.7,na.rm=TRUE) ## [1] 6 PCAs_High_Fsts #order SNPs by Fst bstats_ord &lt;- b_stats$perloc[order(b_stats$perloc$Fst, decreasing = TRUE),] #select SNPs to drop based on Fst Fst500_drop &lt;- bstats_ord %&gt;% slice(501:nrow(.)) %&gt;% row.names(.) Fst200_drop &lt;- bstats_ord %&gt;% slice(201:nrow(.)) %&gt;% row.names(.) Fst100_drop &lt;- bstats_ord %&gt;% slice(101:nrow(.)) %&gt;% row.names(.) Fst50_drop &lt;- bstats_ord %&gt;% slice(51:nrow(.)) %&gt;% row.names(.) Fst25_drop &lt;- bstats_ord %&gt;% slice(26:nrow(.)) %&gt;% row.names(.) #manipulate genind object (gen_groups_Ho_Hw) to only include the SNPs with highest Fsts genobj &lt;- gind_0.5_hw_gulf hiF_500 &lt;- genind.rem.loci(genobj,Fst500_drop) hiF_200 &lt;- genind.rem.loci(genobj,Fst200_drop) hiF_100 &lt;- genind.rem.loci(genobj,Fst100_drop) hiF_50 &lt;- genind.rem.loci(genobj,Fst50_drop) hiF_25 &lt;- genind.rem.loci(genobj,Fst25_drop) x1 &lt;- scaleGen(hiF_500, NA.method = &quot;mean&quot;) x2 &lt;- scaleGen(hiF_200, NA.method = &quot;mean&quot;) x3 &lt;- scaleGen(hiF_100, NA.method = &quot;mean&quot;) x4 &lt;- scaleGen(hiF_50, NA.method = &quot;mean&quot;) x5 &lt;- scaleGen(hiF_25, NA.method = &quot;mean&quot;) pca1 &lt;- dudi.pca(x1,cent=FALSE,scale=FALSE,scannf=FALSE,nf=4) pca2 &lt;- dudi.pca(x2,cent=FALSE,scale=FALSE,scannf=FALSE,nf=4) pca3 &lt;- dudi.pca(x3,cent=FALSE,scale=FALSE,scannf=FALSE,nf=4) pca4 &lt;- dudi.pca(x4,cent=FALSE,scale=FALSE,scannf=FALSE,nf=4) pca5 &lt;- dudi.pca(x5,cent=FALSE,scale=FALSE,scannf=FALSE,nf=4) eig1&lt;-barplot(pca1$eig[1:50],main=&quot;PCA eigenvalues500&quot;, col=heat.colors(50)) eig2&lt;-barplot(pca2$eig[1:50],main=&quot;PCA eigenvalues200&quot;, col=heat.colors(50)) eig3&lt;-barplot(pca3$eig[1:50],main=&quot;PCA eigenvalues100&quot;, col=heat.colors(50)) eig4&lt;-barplot(pca4$eig[1:50],main=&quot;PCA eigenvalues50&quot;, col=heat.colors(50)) eig5&lt;-barplot(pca5$eig[1:50],main=&quot;PCA eigenvalues25&quot;, col=heat.colors(50)) PCAs #500 SNPs PC_ind &lt;- PC.ind(pca1) eig &lt;- eigenvalues(pca1) #rename &quot;Sample_ID&quot; in PC_ind to &quot;INDV&quot; PC_ind &lt;- PC_ind %&gt;% rename(Sample=Sample_ID) PC_ind &lt;- merge(PC_ind,sample_data_groups,by = &quot;Sample&quot;) pc500 &lt;- ggplot(PC_ind, aes(x = Axis1, y = Axis2, color = k_group_name)) + geom_point(alpha = 0.75, size = 2) + labs(x = paste(&quot;PC1:&quot;, round(eig[1, 3], digits = 3), &quot;%&quot;), y = paste(&quot;PC2:&quot;, round(eig[2, 3], digits = 3), &quot;%&quot;))+ ggtitle(&quot;500 SNPs&quot;) + scale_color_hue(direction = -1) pc500 #200 SNPs PC_ind &lt;- PC.ind(pca2) eig &lt;- eigenvalues(pca2) #rename &quot;Sample_ID&quot; in PC_ind to &quot;INDV&quot; PC_ind &lt;- PC_ind %&gt;% rename(Sample=Sample_ID) PC_ind &lt;- merge(PC_ind,sample_data_groups,by = &quot;Sample&quot;) #might need to change the name of the column listing individuals in PC_ind to match sample_info to make these merge properly pc200 &lt;- ggplot(PC_ind, aes(x = Axis1, y = Axis2, color = k_group_name)) + geom_point(alpha = 0.75, size = 2) + labs(x = paste(&quot;PC1:&quot;, round(eig[1, 3], digits = 3), &quot;%&quot;), y = paste(&quot;PC2:&quot;, round(eig[2, 3], digits = 3), &quot;%&quot;))+ ggtitle(&quot;200 SNPs&quot;) + scale_color_hue(direction = -1) pc200 #100 SNPs PC_ind &lt;- PC.ind(pca3) eig &lt;- eigenvalues(pca3) #rename &quot;Sample_ID&quot; in PC_ind to &quot;INDV&quot; PC_ind &lt;- PC_ind %&gt;% rename(Sample=Sample_ID) PC_ind &lt;- merge(PC_ind,sample_data_groups,by = &quot;Sample&quot;) #might need to change the name of the column listing individuals in PC_ind to match sample_info to make these merge properly pc100 &lt;- ggplot(PC_ind, aes(x = Axis1, y = Axis2, color = k_group_name)) + geom_point(alpha = 0.75, size = 2) + labs(x = paste(&quot;PC1:&quot;, round(eig[1, 3], digits = 3), &quot;%&quot;), y = paste(&quot;PC2:&quot;, round(eig[2, 3], digits = 3), &quot;%&quot;))+ ggtitle(&quot;100 SNPs&quot;) + scale_color_hue(direction = -1) pc100 #50 SNPs PC_ind &lt;- PC.ind(pca4) eig &lt;- eigenvalues(pca4) #rename &quot;Sample_ID&quot; in PC_ind to &quot;INDV&quot; PC_ind &lt;- PC_ind %&gt;% rename(Sample=Sample_ID) PC_ind &lt;- merge(PC_ind,sample_data_groups,by = &quot;Sample&quot;) #might need to change the name of the column listing individuals in PC_ind to match sample_info to make these merge properly pc50 &lt;- ggplot(PC_ind, aes(x = Axis1, y = Axis2, color = k_group_name)) + geom_point(alpha = 0.75, size = 2) + labs(x = paste(&quot;PC1:&quot;, round(eig[1, 3], digits = 3), &quot;%&quot;), y = paste(&quot;PC2:&quot;, round(eig[2, 3], digits = 3), &quot;%&quot;))+ ggtitle(&quot;50 SNPs&quot;) + scale_color_hue(direction = -1) pc50 #25 SNPs PC_ind &lt;- PC.ind(pca5) eig &lt;- eigenvalues(pca5) #rename &quot;Sample_ID&quot; in PC_ind to &quot;INDV&quot; PC_ind &lt;- PC_ind %&gt;% rename(Sample=Sample_ID) PC_ind &lt;- merge(PC_ind,sample_data_groups,by = &quot;Sample&quot;) #might need to change the name of the column listing individuals in PC_ind to match sample_info to make these merge properly pc25 &lt;- ggplot(PC_ind, aes(x = Axis1, y = Axis2, color = k_group_name)) + geom_point(alpha = 0.75, size = 2) + labs(x = paste(&quot;PC1:&quot;, round(eig[1, 3], digits = 3), &quot;%&quot;), y = paste(&quot;PC2:&quot;, round(eig[2, 3], digits = 3), &quot;%&quot;))+ ggtitle(&quot;25 SNPs&quot;) + scale_color_hue(direction = -1) pc25 4.6.1 Select 25 SNPs with highest Fst for differentiating nfl vs. gfl vs. ngom #50 SNPs with highest Fst for differentiating fl vs. ngom flvngom_25&lt;- locNames(hiF_25) 4.7 MAF Select loci with highest MAF across populations 4.7.1 Calculate Minor Allele Frequency for each locus in each genetic group # calculate maf maf_ngom &lt;- as.data.frame(minorAllele(gind_0.5_hw[gind_0.5_hw@strata$k_group_name == &quot;ngom&quot;,])) maf_gfl &lt;- as.data.frame(minorAllele(gind_0.5_hw[gind_0.5_hw@strata$k_group_name == &quot;gfl&quot;,])) maf_nfl &lt;- as.data.frame(minorAllele(gind_0.5_hw[gind_0.5_hw@strata$k_group_name == &quot;nfl&quot;,])) maf_stx &lt;- as.data.frame(minorAllele(gind_0.5_hw[gind_0.5_hw@strata$k_group_name == &quot;stx&quot;,])) #change column names colnames(maf_ngom)[1] &lt;- &quot;frq&quot; maf_ngom$probeset_id &lt;- rownames(maf_ngom) colnames(maf_gfl)[1] &lt;- &quot;frq&quot; maf_gfl$probeset_id &lt;- rownames(maf_gfl) colnames(maf_nfl)[1] &lt;- &quot;frq&quot; maf_nfl$probeset_id &lt;- rownames(maf_nfl) colnames(maf_stx)[1] &lt;- &quot;frq&quot; maf_stx$probeset_id &lt;- rownames(maf_stx) hist(maf_ngom$frq,main =&quot;MAF ngom&quot;,xlab =&quot;loci&quot;) hist(maf_gfl$frq,main =&quot;MAF gfl&quot;,xlab =&quot;loci&quot;) hist(maf_nfl$frq,main =&quot;MAF nfl&quot;,xlab =&quot;loci&quot;) hist(maf_stx$frq, main =&quot;MAF stx&quot;, xlab = &quot;loci&quot;) 4.7.2 Re-calculate after removing loci with MAF of 1 #remove the maf frq of 1 maf_ngom &lt;- maf_ngom[!maf_ngom$frq==1,] maf_gfl &lt;- maf_gfl[!maf_gfl$frq==1,] maf_nfl &lt;- maf_nfl[!maf_nfl$frq==1,] maf_stx &lt;- maf_stx[!maf_stx$frq==1,] hist(maf_ngom$frq,main =&quot;MAF ngom&quot;,xlab =&quot;loci&quot;) hist(maf_gfl$frq,main =&quot;MAF gfl&quot;,xlab =&quot;loci&quot;) hist(maf_nfl$frq,main =&quot;MAF nfl&quot;,xlab =&quot;loci&quot;) hist(maf_stx$frq, main =&quot;MAF stx&quot;, xlab = &quot;loci&quot;) 4.7.3 Identify loci with high MAF in all groups nfl_frq &lt;- arrange(maf_nfl, probeset_id) %&gt;% rename(nfl_probe = probeset_id, nfl_frq = frq) gfl_frq &lt;- arrange(maf_gfl, probeset_id) %&gt;% rename(gfl_probe = probeset_id, gfl_frq = frq) ngom_frq &lt;- arrange(maf_ngom, probeset_id) %&gt;% rename(ngom_probe = probeset_id, ngom_frq = frq) stx_frq &lt;- arrange(maf_stx, probeset_id) %&gt;% rename(stx_probe = probeset_id, stx_frq = frq) MAF_groups &lt;- bind_cols(nfl_frq,gfl_frq,ngom_frq,stx_frq) Check that data is in order #check that probes are in the right order MAF_groups %&gt;% mutate(ngom_stx_pr = if_else(ngom_probe == stx_probe, 1, 0)) %&gt;% filter(ngom_stx_pr == 0) MAF_groups %&gt;% mutate(nfl_stx_pr = if_else(nfl_probe == stx_probe, 1, 0)) %&gt;% filter(nfl_stx_pr == 0) MAF_groups %&gt;% mutate(nfl_gfl_pr = if_else(nfl_probe == gfl_probe, 1, 0)) %&gt;% filter(nfl_gfl_pr == 0) 4.7.4 Select MAF loci and exmaine histograms of loci Selecting MAF greater than 0.05 for gfl, nfl, and ngom, and greater than 0.03 for stx MAF_groups &lt;- bind_cols(gfl_frq,nfl_frq,ngom_frq,stx_frq) MAF_groups_filt &lt;- MAF_groups %&gt;% filter(gfl_frq &gt; 0.05, nfl_frq &gt; 0.05, ngom_frq &gt; 0.05, stx_frq &gt; 0.03) hist(MAF_groups_filt$nfl_frq,main = &quot;MAF NFL Filtered&quot;, xlab=&quot;loci&quot;) hist(MAF_groups_filt$gfl_frq,main = &quot;MAF GFL Filtered&quot;, xlab=&quot;loci&quot;) hist(MAF_groups_filt$ngom_frq,main = &quot;MAF ngom Filtered&quot;, xlab=&quot;loci&quot;) hist(MAF_groups_filt$stx_frq,main = &quot;MAF stx Filtered&quot;, xlab=&quot;loci&quot;) nrow(MAF_groups_filt) ## [1] 10774 Result is 10,774 candidate loci 4.8 Save files #loci and their maf for each genetic group saveRDS(nfl_frq, file = here::here(&quot;data&quot;,&quot;derived&quot;,&quot;nfl_frq&quot;)) saveRDS(gfl_frq, file = here::here(&quot;data&quot;,&quot;derived&quot;,&quot;gfl_frq&quot;)) saveRDS(ngom_frq, file = here::here(&quot;data&quot;,&quot;derived&quot;,&quot;ngom_frq&quot;)) saveRDS(stx_frq, file = here::here(&quot;data&quot;,&quot;derived&quot;,&quot;stx_frq&quot;)) #genotypes file, with genotypes as columns, rows as individuals, filtered out for HE and HWE saveRDS(genotypes_0.5_hw,file = here::here(&quot;data&quot;,&quot;derived&quot;,&quot;genotypes_f_he_hw&quot;)) #25 SNPS with high FST for stx vs. gulf to be included in panel saveRDS(stxvgulf_25, file = here::here(&quot;data&quot;,&quot;derived&quot;,&quot;stxvgulf_25&quot;)) #25 SNPS for florida v gulf (highest FST) saveRDS(flvngom_25, file = here::here(&quot;data&quot;,&quot;derived&quot;,&quot;flvngom_25&quot;)) #10744 SNPs with MAF greater than .05 for nfl, gfl, nGOM and greater than .03 MAF for stx saveRDS(MAF_groups_filt, file = here::here(&quot;data&quot;,&quot;derived&quot;,&quot;MAF_SNPs&quot;)) "],["select-snps-for-panel.html", "5 Select SNPs for Panel 5.1 Read in all data on SNPs and relevant data from Section 3 5.2 Filter the SNP data file to only include MAF SNPS selected in Section3 5.3 Specify number of markers from each chromosome you will select 5.4 Use greedy algorithm to select 5200 snps for 5K array (200 extras) 5.5 Add Pop Diagnostic SNPs to MAF SNPs for final list", " 5 Select SNPs for Panel 5.1 Read in all data on SNPs and relevant data from Section 3 snp_info_full &lt;- readRDS(file = here::here(&quot;data&quot;,&quot;derived&quot;,&quot;snp_info_full&quot;)) # genotypes as columns, rows as individuals, loci filtered out for HE and HWE filt_genotypes &lt;- readRDS(here::here(&quot;data&quot;,&quot;derived&quot;,&quot;genotypes_f_he_hw&quot;)) # 25 SNPS with high FST for stx vs. gulf to be included in panel stxvgulf_snps &lt;- readRDS(here::here(&quot;data&quot;,&quot;derived&quot;,&quot;stxvgulf_25&quot;)) # 25 SNPS for florida v gulf (highest FST) flvgulf_snps &lt;- readRDS(here::here(&quot;data&quot;,&quot;derived&quot;,&quot;flvngom_25&quot;)) # 10774 SNPs with greater than .05 MAF for nfl, gfl, nGOM and greater than .03 MAF for stx MAF_snps &lt;- readRDS(here::here(&quot;data&quot;,&quot;derived&quot;,&quot;MAF_SNPs&quot;)) %&gt;% tibble(., snp_id = rownames(.)) %&gt;% pull(snp_id) 5.2 Filter the SNP data file to only include MAF SNPS selected in Section3 candidates &lt;- snp_info_full %&gt;% select(probeset_id,cust_chr,cust_pos) %&gt;% filter(probeset_id %in% MAF_snps) %&gt;% mutate(cust_chr = as.numeric (cust_chr)) %&gt;% unique() 5.3 Specify number of markers from each chromosome you will select First identify the length of each chromosome you will be selecting from (for proportional selection) Order of chromosomes (per Supplementary Table 3 in Guo et al, 2023) chrom_num == 1 ~ &quot;NC_035780.1&quot;, chrom_num == 2 ~ &quot;NC_035781.1&quot;, chrom_num == 3 ~ &quot;NC_035782.1&quot;, chrom_num == 4 ~ &quot;NC_035783.1&quot;, chrom_num == 5 ~ &quot;NC_035784.1&quot;, chrom_num == 6 ~ &quot;NC_035785.1&quot;, chrom_num == 7 ~ &quot;NC_035786.1&quot;, chrom_num == 8 ~ &quot;NC_035787.1&quot;, chrom_num == 9 ~ &quot;NC_035788.1&quot;, chrom_num == 10 ~ &quot;NC_035789.1&quot; Lengths of the chromosomes: (based on Guo et al, 2023) nChr &lt;- 10 chrLen &lt;- c(65668440, 61752955, 77061148, 59691872, 98698416, 51258098, 57830854, 75944018, 104168038,32650045) chrom_info &lt;- tibble(1:10,chrLen) %&gt;% rename(chrom = &quot;1:10&quot;, pos = chrLen) as_tibble(chrom_info) ## # A tibble: 10 × 2 ## chrom pos ## &lt;int&gt; &lt;dbl&gt; ## 1 1 65668440 ## 2 2 61752955 ## 3 3 77061148 ## 4 4 59691872 ## 5 5 98698416 ## 6 6 51258098 ## 7 7 57830854 ## 8 8 75944018 ## 9 9 104168038 ## 10 10 32650045 saveRDS(chrom_info, file = here(&quot;data&quot;,&quot;derived&quot;,&quot;chrom_info&quot;)) Function to split up the SNPs proportionally based on chrLen Much of the code below is taken from Thomas Delomas’ public github repository OysterSimGS_2021 script multGen_scrm_ai2_HPC.R snps_by_chr &lt;- lapply(5200, function(x){ dfOut &lt;- data.frame(chr = 1:nChr, num = round(x * (chrLen/ sum(chrLen)))) #note 5200 specifies the number of SNPs we are selecting # num is calculated with this function. num is the number of positions assigned to each chromosome, calculated based on the proportion of the chromosome length (chrLen) relative to the total chromosome length (sum(chrLen)). The values are rounded. #The following block of code adjusts the values in the num column to account for rounding errors: #If diff is greater than 0, it randomly selects diff chromosomes and increments their num values by 1. #If diff is less than 0, it randomly selects -diff chromosomes and decrements their num values by 1. # account for rounding error diff &lt;- x - sum(dfOut$num) if(diff &gt; 0){ temp &lt;- sample(1:nChr, size = diff, replace = FALSE) dfOut$num[temp] &lt;- dfOut$num[temp] + 1 } else if (diff &lt; 0){ temp &lt;- sample(1:nChr, size = -diff, replace = FALSE) dfOut$num[temp] &lt;- dfOut$num[temp] - 1 } return(dfOut) }) Check and make sure adds up to 5200 sum(snps_by_chr[[1]]$num) ## [1] 5200 Check and compare the number of SNPs targeted from each chrom (snps_to_select_per_chr) and the number of SNPs available to select (candidate_snps) snps_to_select_per_chr &lt;- snps_by_chr[[1]] %&gt;% mutate(length = chrLen) %&gt;% rename(chrom = chr, to_choose = num) snps_to_select_per_chr ## chrom to_choose length ## 1 1 499 65668440 ## 2 2 469 61752955 ## 3 3 585 77061148 ## 4 4 453 59691872 ## 5 5 750 98698416 ## 6 6 389 51258098 ## 7 7 439 57830854 ## 8 8 577 75944018 ## 9 9 791 104168038 ## 10 10 248 32650045 candidate_snps &lt;- candidates %&gt;% group_by(cust_chr) %&gt;% count() candidate_snps ## # A tibble: 10 × 2 ## # Groups: cust_chr [10] ## cust_chr n ## &lt;dbl&gt; &lt;int&gt; ## 1 1 751 ## 2 2 1309 ## 3 3 1611 ## 4 4 783 ## 5 5 2184 ## 6 6 654 ## 7 7 1451 ## 8 8 834 ## 9 9 936 ## 10 10 261 5.4 Use greedy algorithm to select 5200 snps for 5K array (200 extras) Going to use “choose_snps_greedy” function in ldpanelopt library(ldpanelopt) 5.4.1 Make snp_tbl Table of snp_id, chromosome the snp is found on, position on the chromosome, maf of the snp, “chip1” which is just a sequence of numbers 1:number of snps, and “chip2” which is 0 maf_snps &lt;-readRDS(here::here(&quot;data&quot;,&quot;derived&quot;,&quot;MAF_SNPs&quot;)) %&gt;% tibble(., snp_id = rownames(.)) %&gt;% select(snp_id,gfl_frq,nfl_frq,ngom_frq,stx_frq) %&gt;% rowwise() %&gt;% mutate(maf = mean(c(gfl_frq,nfl_frq,ngom_frq,stx_frq))) %&gt;% select(snp_id, maf) maf_snps ## # A tibble: 10,774 × 2 ## # Rowwise: ## snp_id maf ## &lt;chr&gt; &lt;dbl&gt; ## 1 AX562728433 0.238 ## 2 AX562729356 0.191 ## 3 AX562729453 0.204 ## 4 AX562729930 0.247 ## 5 AX562733277 0.272 ## 6 AX562733495 0.313 ## 7 AX562733961 0.160 ## 8 AX562735439 0.186 ## 9 AX562736320 0.218 ## 10 AX562737211 0.244 ## # ℹ 10,764 more rows snp_tbl &lt;- candidates %&gt;% arrange(-desc(cust_chr)) %&gt;% mutate(cust_chr = as.character(cust_chr)) %&gt;% mutate(chip1 = seq(1:nrow(.))) %&gt;% mutate(chip2 = 0) %&gt;% rename(snp_id = probeset_id, chrom = cust_chr, pos = cust_pos) %&gt;% mutate(pos = as.numeric(pos)) %&gt;% left_join(.,maf_snps, by = &quot;snp_id&quot;) %&gt;% select(snp_id, chrom, pos, maf, chip1, chip2) as_tibble(snp_tbl) ## # A tibble: 10,774 × 6 ## snp_id chrom pos maf chip1 chip2 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 AX562728433 1 59205245 0.238 1 0 ## 2 AX562729356 1 59722684 0.191 2 0 ## 3 AX562729453 1 59794668 0.204 3 0 ## 4 AX562729930 1 60046917 0.247 4 0 ## 5 AX562733277 1 61521865 0.272 5 0 ## 6 AX562733495 1 61742861 0.313 6 0 ## 7 AX562733961 1 20277463 0.160 7 0 ## 8 AX562735439 1 62906370 0.186 8 0 ## 9 AX562736320 1 63385209 0.218 9 0 ## 10 AX562737211 1 63633574 0.244 10 0 ## # ℹ 10,764 more rows Set up chrom_tbl, which lists the chromosomes, the length of each chromosomes, and the number of snps to choose per chromosome based on their size chrom_tbl &lt;- snps_to_select_per_chr %&gt;% select(chrom,length,to_choose) %&gt;% mutate(chrom = as.character(chrom)) as_tibble(chrom_tbl) ## # A tibble: 10 × 3 ## chrom length to_choose ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 65668440 499 ## 2 2 61752955 469 ## 3 3 77061148 585 ## 4 4 59691872 453 ## 5 5 98698416 750 ## 6 6 51258098 389 ## 7 7 57830854 439 ## 8 8 75944018 577 ## 9 9 104168038 791 ## 10 10 32650045 248 Run the greedy algorithm test &lt;- choose_snps_greedy(snp_tbl,chrom_tbl) Check results, should be data frame similar to snp_tbl, but now “chip2” specifies if the snp has been selected for the panel or not. If 0, it is not selected. as_tibble(test) ## # A tibble: 10,774 × 6 ## snp_id chrom pos maf chip1 chip2 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 AX562728433 1 59205245 0.238 1 1 ## 2 AX562729356 1 59722684 0.191 2 0 ## 3 AX562729453 1 59794668 0.204 3 0 ## 4 AX562729930 1 60046917 0.247 4 2 ## 5 AX562733277 1 61521865 0.272 5 3 ## 6 AX562733495 1 61742861 0.313 6 4 ## 7 AX562733961 1 20277463 0.160 7 5 ## 8 AX562735439 1 62906370 0.186 8 6 ## 9 AX562736320 1 63385209 0.218 9 7 ## 10 AX562737211 1 63633574 0.244 10 0 ## # ℹ 10,764 more rows Select the MAF snps selected for panel panel_snps &lt;- test %&gt;% filter(chip2 &gt; 0) Examine number of selected snps per chromosome panel_snps %&gt;% group_by(chrom) %&gt;% count() ## # A tibble: 10 × 2 ## # Groups: chrom [10] ## chrom n ## &lt;chr&gt; &lt;int&gt; ## 1 1 499 ## 2 10 248 ## 3 2 469 ## 4 3 585 ## 5 4 453 ## 6 5 750 ## 7 6 389 ## 8 7 439 ## 9 8 577 ## 10 9 791 5.4.2 Check and make sure the algorithm gave sensible results The panel_snps should have higher mean maf than the candidate snps in snp_tbl panel_snps %&gt;% group_by(chrom) %&gt;% summarize(mean(maf)) ## # A tibble: 10 × 2 ## chrom `mean(maf)` ## &lt;chr&gt; &lt;dbl&gt; ## 1 1 0.234 ## 2 10 0.208 ## 3 2 0.276 ## 4 3 0.278 ## 5 4 0.241 ## 6 5 0.279 ## 7 6 0.227 ## 8 7 0.284 ## 9 8 0.230 ## 10 9 0.216 snp_tbl %&gt;% group_by(chrom) %&gt;% summarize(mean(maf)) ## # A tibble: 10 × 2 ## chrom `mean(maf)` ## &lt;chr&gt; &lt;dbl&gt; ## 1 1 0.214 ## 2 10 0.203 ## 3 2 0.214 ## 4 3 0.216 ## 5 4 0.214 ## 6 5 0.215 ## 7 6 0.199 ## 8 7 0.210 ## 9 8 0.207 ## 10 9 0.206 They do 5.5 Add Pop Diagnostic SNPs to MAF SNPs for final list #population diagnostic snps pop_snps &lt;-snp_info_full %&gt;% select(probeset_id,cust_chr,cust_pos) %&gt;% filter(probeset_id %in% flvgulf_snps | probeset_id %in% stxvgulf_snps) %&gt;% mutate(cust_chr = as.numeric (cust_chr)) %&gt;% unique() %&gt;% rename(snp_id = probeset_id, chrom = cust_chr,pos = cust_pos) %&gt;% mutate(pos = as.numeric(pos)) as_tibble(pop_snps) ## # A tibble: 50 × 3 ## snp_id chrom pos ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AX563489003 1 42310796 ## 2 AX564362466 1 42158083 ## 3 AX566845614 2 24478387 ## 4 AX567445903 4 39309711 ## 5 AX567707328 8 6683853 ## 6 AX567719919 8 7095343 ## 7 AX567844508 9 56175126 ## 8 AX568205320 2 24477120 ## 9 AX568402584 1 42163393 ## 10 AX570588190 5 62236352 ## # ℹ 40 more rows panel_snps &lt;- panel_snps %&gt;% select(snp_id,chrom,pos,maf) %&gt;% mutate(chrom = as.numeric(chrom)) %&gt;% bind_rows(.,pop_snps) saveRDS(panel_snps, file = here(&quot;data&quot;,&quot;derived&quot;,&quot;panel_snps&quot;)) "],["summary-plots-of-snps-for-panel.html", "6 Summary Plots of SNPs for Panel 6.1 Distribution of SNPs 6.2 MAF per population 6.3 PCA with selected SNPs", " 6 Summary Plots of SNPs for Panel 6.1 Distribution of SNPs panel_snps &lt;- readRDS(file = here::here(&quot;data&quot;,&quot;derived&quot;,&quot;panel_snps&quot;)) as_tibble(panel_snps) ## # A tibble: 5,250 × 4 ## snp_id chrom pos maf ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AX562728433 1 59205245 0.238 ## 2 AX562729930 1 60046917 0.247 ## 3 AX562733277 1 61521865 0.272 ## 4 AX562733495 1 61742861 0.313 ## 5 AX562733961 1 20277463 0.160 ## 6 AX562735439 1 62906370 0.186 ## 7 AX562736320 1 63385209 0.218 ## 8 AX562738101 1 63903571 0.212 ## 9 AX562738713 1 64464304 0.272 ## 10 AX562738980 1 64615172 0.411 ## # ℹ 5,240 more rows ggplot(panel_snps, aes(x = chrom, y = pos)) + geom_point(size = 0.2) Add in the maximum position for each chromosome (in red) chrom_info &lt;- readRDS(file = here(&quot;data&quot;,&quot;derived&quot;,&quot;chrom_info&quot;)) ggplot(panel_snps, aes(x = chrom, y = pos)) + geom_point(size = 0.2) + geom_point(data = chrom_info, color = &quot;red&quot;, size = 1) + xlab(&quot;chromosome&quot;) + ylab(&quot;position&quot;) + scale_x_continuous(breaks=1:10) + ggtitle(&quot;positions of selected snps per chromosome&quot;) 6.2 MAF per population Examine the distribution of MAF of SNPs for each population First fetch the data nfl_frq &lt;- readRDS(file = here::here(&quot;data&quot;,&quot;derived&quot;,&quot;nfl_frq&quot;)) %&gt;% rename(snp_id = nfl_probe) %&gt;% filter(snp_id %in% panel_snps$snp_id) %&gt;% remove_rownames() gfl_frq &lt;- readRDS(file = here::here(&quot;data&quot;,&quot;derived&quot;,&quot;gfl_frq&quot;)) %&gt;% rename(snp_id = gfl_probe) %&gt;% filter(snp_id %in% panel_snps$snp_id) %&gt;% remove_rownames() ngom_frq &lt;- readRDS(file = here::here(&quot;data&quot;,&quot;derived&quot;,&quot;ngom_frq&quot;)) %&gt;% rename(snp_id = ngom_probe) %&gt;% filter(snp_id %in% panel_snps$snp_id) %&gt;% remove_rownames() stx_frq &lt;- readRDS(file = here::here(&quot;data&quot;,&quot;derived&quot;,&quot;stx_frq&quot;)) %&gt;% rename(snp_id = stx_probe) %&gt;% filter(snp_id %in% panel_snps$snp_id) %&gt;% remove_rownames() Format the data maf &lt;- nfl_frq %&gt;% left_join(.,gfl_frq,by=&quot;snp_id&quot;) %&gt;% left_join(.,ngom_frq,by=&quot;snp_id&quot;) %&gt;% left_join(.,stx_frq,by=&quot;snp_id&quot;) %&gt;% select(snp_id,everything()) Need to format data to “long” format maf_long &lt;- maf %&gt;% rename(stx = stx_frq, ngom = ngom_frq, nfl = nfl_frq, gfl = gfl_frq) %&gt;% pivot_longer(!snp_id, names_to = &quot;pop&quot;, values_to = &quot;maf&quot;) Plot maf data ggplot(maf_long, aes(x=pop, y=maf)) + geom_boxplot(width=0.5)+ xlab(&quot;genetic group&quot;) + ylab(&quot;minor allele frequency&quot;) + ggtitle(&quot;minor allele frequency of selected snps per genetic group&quot;) 6.3 PCA with selected SNPs Read in sample data sample_data &lt;-readRDS(here(&quot;data&quot;,&quot;derived&quot;,&quot;sample_data&quot;)) Read in genotype data (genotypes for each individual at each loci), filter so only includes loci on panel genotypes &lt;- readRDS(here(&quot;data&quot;,&quot;derived&quot;,&quot;genotypes_f_he_hw&quot;)) genotypes_with_panel_snps &lt;- genotypes[, maf$snp_id] Turn data into a genind object gind &lt;- df2genind(genotypes_with_panel_snps, ncode = 1, sep = &quot;&quot;, NA.char = NA, ploidy = 2) gind ## /// GENIND OBJECT ///////// ## ## // 380 individuals; 5,250 loci; 10,500 alleles; size: 18 Mb ## ## // Basic content ## @tab: 380 x 10500 matrix of allele counts ## @loc.n.all: number of alleles per locus (range: 2-2) ## @loc.fac: locus factor for the 10500 columns of @tab ## @all.names: list of allele names for each locus ## @ploidy: ploidy of each individual (range: 2-2) ## @type: codom ## @call: df2genind(X = genotypes_with_panel_snps, sep = &quot;&quot;, ncode = 1, ## NA.char = NA, ploidy = 2) ## ## // Optional content ## - empty - Run a PCA x1 &lt;- scaleGen(gind, NA.method = &quot;mean&quot;) pca1 &lt;- dudi.pca(x1,cent=FALSE,scale=FALSE,scannf=FALSE,nf=4) eig1&lt;-barplot(pca1$eig[1:10],main=&quot;PCA eigenvalues&quot;, col=heat.colors(50)) PC_ind &lt;- PC.ind(pca1) eig &lt;- eigenvalues(pca1) #rename &quot;Sample_ID&quot; in PC_ind to &quot;INDV&quot; PC_ind &lt;- PC_ind %&gt;% rename(Sample=Sample_ID) PC_ind &lt;- merge(PC_ind,sample_data,by = &quot;Sample&quot;) pc &lt;- ggplot(PC_ind, aes(x = Axis1, y = Axis2, color = gen_group)) + geom_point(alpha = 0.75, size = 2) + labs(x = paste(&quot;PC1:&quot;, round(eig[1, 3], digits = 3), &quot;%&quot;), y = paste(&quot;PC2:&quot;, round(eig[2, 3], digits = 3), &quot;%&quot;))+ ggtitle(&quot;500 SNPs&quot;) + scale_color_hue(direction = -1) pc "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
